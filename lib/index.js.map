{"version":3,"file":"index.js","sources":["../src/instruction.ts","../src/token.ts","../src/utils/index.ts","../src/utils/functions.ts","../src/systemMap.ts","../src/utils/regExp.ts","../src/parser.ts","../src/utils/reservedWord.ts","../src/token-stream.ts","../src/calculation.ts","../src/utils/presetVariable.ts","../src/interface.ts","../src/index.ts"],"sourcesContent":["/** @desc 一元运算符 */\nexport const INSTR_OPERA1 = 'INSTR_OP1';\n/** @desc 二元运算符 */\nexport const INSTR_OPERA2 = 'INSTR_OP2';\n/** @desc 三元运算符 */\nexport const INSTR_OPERA3 = 'INSTR_OP3';\n\n/** @desc 数字 */\nexport const INSTR_NUMBER = 'INSTR_NUMBER';\n/** @desc 数组字面量 */\nexport const INSTR_ARRAY = 'INSTR_ARRAY';\n/** @desc 对象字面量 */\nexport const INSTR_OBJECT = 'INSTR_OBJECT';\n/** @desc 简单类型，表示不用处理 */\nexport const INSTR_PLAIN = 'INSTR_PLAIN';\n\n/** @desc 对象成员访问 */\nexport const INSTR_MEMBER = 'INSTR_MEMBER';\n\n/** @desc 表达式, 内置表达式 */\nexport const INSTR_EXPRE = 'INSTR_EXPRE';\n\n/** @desc 变量类型 const let var */\nexport const INSTR_VAR = 'INSTR_VAR';\n/** @desc 变量名称, 区别是内声明 TODO: var obj = {} */\nexport const INSTR_VARNAME = 'INSTR_VARNAME';\n/** @desc 变量名称, 取值, 没有经过声明的名称，例如 undefined, null, 以及数据池中的数据 */\nexport const INSTR_NAME = 'INSTR_NAME';\n\n/** @desc 函数调用 */\nexport const INSTR_FUNCALL = 'INSTR_FUNCALL'; // TODO: 函数声明\n/** @desc 函数定义指令 */\nexport const INSTR_FUNCDEF = 'INSTR_FUNCDEF';\n/** @desc 函数执行体 */\nexport const INSTR_EXECUTBODY = 'INSTR_EXECUTBODY';\n\n\n/**\n * @desc 指令实例\n */\nexport default class Instruction<T extends any> {\n\n  value: T;\n\n  constructor(public type: string, value?: any) {\n    this.value = (value !== undefined && value !== null) ? value : 0;\n  }\n}\n\n","/** @desc 结束标记 */\nexport const TOKEN_END = 'TOKEN_END';\n/** @desc 操作符类型 */\nexport const TOKEN_OPERATOR = 'TOKEN_OP';\n/** @desc 数字类型 */\nexport const TOKEN_NUMBER = 'TOKEN_NUMBER';\n/** @desc 字符串类型 */\nexport const TOKEN_STRING = 'TOKEN_STRING';\n/** @desc 圆括号，调用 */\nexport const TOKEN_PAREN = 'TOKEN_PAREN';\n/** @desc 方括号，成员访问 [] */\nexport const TOKEN_SQUARE = 'TOKEN_SQUARE';\n/** @desc 花括号，字面量声明 */\nexport const TOKEN_CURLY = 'TOKEN_CURLY';\n/** @desc 逗号 , */\nexport const TOKEN_COMMA = 'TOKEN_COMMA';\n/** @desc 变量 , */\nexport const TOKEN_VAR = 'TOKEN_VAR';\n/** @desc 变量名称 */\nexport const TOKEN_NAME = 'TOKEN_NAME';\n/** @desc 函数定义 */\nexport const TOKEN_FUNC = 'TOKEN_FUNC';\n/** @desc 结束标记; */\nexport const TOKEN_SEMICOLON = 'TOKEN_SEMICOLON';\n\n/**\n * tokenStream 解析阶段指令\n * @export \n * @class Token\n */\nexport default class Token {\n  constructor(public type: string, public value: any, public index: number) {\n    if ((window as any)._debug) {\n      console.log(`type: ${type}; value: ${value}; index: ${index}`)\n    }\n  }\n\n  toString = () => {\n    return this.type + ': ' + this.value;\n  };\n}\n\n","import Instruction from '../instruction';\n\nconst { toString } = Object.prototype;\n\n\nexport function isObject(obj: object): obj is object {\n  return toString.call(obj) === '[object Object]'\n}\n\n/**\n * @export\n * @template T\n * @param {T[]} arr\n * @param {T} value\n * @returns {boolean}\n */\nexport function contains<T extends any>(arr: T[], value: T): boolean {\n  return arr.some(v => v === value)\n}\n\n/**\n * 获取日期时间\n * @export getTime\n * @param {number} [offset=0] 偏移量\n * @returns {string[]} [date, time]\n */\nexport function getTime(offset = 0): string[] {\n  const o = new Date(Date.now() + offset);\n  const date = `${o.getFullYear()}-${o.getMonth() + 1}-${o.getDate()}`\n  const clock = `${o.getHours()}:${o.getMinutes()}:${o.getSeconds()}`.replace(/\\d+/g, (t) => {\n    return parseInt(t, 10) < 10 ? `0${t}`: t\n  })\n  \n  return [date, clock]\n}\n\n\n/**\n * 递归foreach\n * @export mapVal\n * @template T\n * @param {T} data\n * @param {Record<string, Record<string, any>>} object\n * @param {(data: T, key:string, val: any) => void} cb\n * @returns\n */\nexport function mapVal<T extends object>(data: T, object: object, cb: (data: T, key: string, val: any) => void) {\n  Object.keys(object).map(key => {\n    return isObject(object[key]) ? mapVal(data, object[key], cb) : cb(data, key, object[key])\n  })\n  return data\n}\n\n/**\n * 前者为主，仅合并不存在属性\n * @template T object\n * @param {T} target\n * @param {T} source\n */\nexport function merge<T>(target: T, source: T) {\n  Object.keys(source).forEach(key => {\n    const val = source[key]\n    if (Object.prototype.hasOwnProperty.call(target, key)) return\n    if (Array.isArray(val)) {\n      merge(target[key] = [], val)\n    }else if (isObject(val)) {\n      merge(target[key] = {}, val)\n    } else {\n      target[key] = val\n    }\n  })\n  return target\n}\n\n/**\n * 替换\\'\\' \\\"\\\" 在 处理 in operator 需要到\n * @param {string} str string Field\n * @returns {string} 没有对称引号的字符串\n */\nexport function eliminateQuote(str: string): string {\n  const quoteReg = /^\\\"(.*)\\\"$|^\\'(.*)\\'$/;\n  if (!quoteReg.test(str)) return str\n  const result = quoteReg.exec(str)\n  const s = result[1] !== undefined ? result[1] : result[2]\n  return eliminateQuote(s)\n}\n/**\n * 回文字符串 \\'\\'a\\'\\' ✅  \\'\\'a\\'❌\n * @param {string} str\n * @returns\n */\nexport function isPalindrome(str: string) {\n  let i = 0\n  while (contains(['\\'', '\\\"'], str.charAt(i)) && str.charAt(i) === str.charAt(str.length - 1 - i)) {\n    i++\n  }\n  const surplusStr = str.substring(i, str.length - i)\n  return surplusStr.indexOf('\\\"') === -1 && surplusStr.indexOf('\\'') === -1\n}\n\n/**\n * 返回首个有效数据， 非undefined null false true\n * @param {*} args\n */\nexport function filterUndefine(...args) {\n  let one\n  args.some(item => {\n    if (contains([undefined, null, true, false], item)) return false\n    one = item\n    return true;\n  })\n  return one\n}\n\n\nexport function hasAttribute(obj: object, name: string) {\n  return Object.prototype.hasOwnProperty.call(obj, name)\n}\n\n/**\n * Array to Object e.g. ['a', 'b'] => { a: undefined, b: undefined }\n * @param {string[]} arr \n */\nexport function mapToObject(arr: string[] | Instruction<any>[], defaultValue: undefined | ((key: string) => any) = undefined) {\n  if (typeof arr[0] === 'string' && arr.length !== [...new Set(arr as any)].length) {\n    // 参数重复\n    throw new Error(`Duplicate parameter: ${arr.join(',')}`)\n  }\n  const obj = Object.create(null)\n  arr.forEach((item) => {\n    let key\n    if (item instanceof Instruction) {\n      key = item.value\n    } else {\n      key = item\n    }\n    obj[key] = (typeof defaultValue === 'function' ? defaultValue(key) : defaultValue)\n  })\n  return obj\n}","import { contains, isObject, eliminateQuote } from './index';\nimport { CevalOptions } from '../interface';\n\nfunction getDigitLength(num: number){\n  return (num.toString().split('.')[1] || '').length;\n}\n\nfunction checkBounds(number: number) {\n  return number > Number.MAX_SAFE_INTEGER || number < Number.MIN_SAFE_INTEGER\n}\n\nfunction getBaseNum(a: number, b: number): number {\n  const baseNum = Math.pow(10, Math.max(getDigitLength(a), getDigitLength(b)));\n  if(checkBounds(a * baseNum) || checkBounds(b * baseNum)) { // 超出边界的情况不予处理\n    return 0\n  }\n  return baseNum\n}\n\nconst unwantedHandlePercision = (a, b) => {\n  // 整数不需要处理 || 非Number也不需要\n  return (Number.isInteger(a) && Number.isInteger(b)) || (typeof a !== 'number' || typeof b !== 'number')\n}\n\nexport function add(a: number, b: number, options: CevalOptions): number {\n  if(options.allowHandleNumberPrecision === false || unwantedHandlePercision(a,b)) return a + b\n  const baseNum = getBaseNum(a,b);\n  return baseNum === 0 ? a + b : (Math.round(a * baseNum) + Math.round(b * baseNum)) / baseNum \n}\n\nexport function sub(a: number, b: number, options: CevalOptions): number {\n  if(options.allowHandleNumberPrecision === false || unwantedHandlePercision(a,b)) return a - b\n  const baseNum = getBaseNum(a,b)\n  return baseNum === 0 ? a - b : (Math.round(a * baseNum) - Math.round(b * baseNum)) / baseNum;\n}\n\nexport function mul(a: number, b: number, options: CevalOptions): number {\n  if(options.allowHandleNumberPrecision === false || unwantedHandlePercision(a,b)) return a * b\n  const baseNum = getBaseNum(a,b)\n  return baseNum === 0 ? a * b : (Math.round(a * baseNum) * Math.round(b * baseNum)) / Math.pow(baseNum, 2);\n}\n\nexport function divide(a: number, b: number, options: CevalOptions): number {\n  if( options.allowHandleNumberPrecision === false || unwantedHandlePercision(a,b)) return a / b\n  const baseNum = getBaseNum(a,b)\n  return baseNum === 0 ? a / b : (Math.round(a * baseNum) / Math.round(b * baseNum));\n}\n\nexport function mod(a, b) {\n  return a % b;\n}\n\nexport function equal(a, b) {\n  // eslint-disable-next-line\n  return a == b;\n}\n\nexport function strictEqual(a, b) {\n  return a === b;\n}\n\nexport function notEqual(a, b) {\n  // eslint-disable-next-line\n  return a != b;\n}\n\nexport function strictNotEqual(a, b) {\n  return a !== b;\n}\n\nexport function greaterThan(a, b) {\n  return a > b;\n}\n\nexport function lessThan(a, b) {\n  return a < b;\n}\n\nexport function greaterThanEqual(a, b) {\n  return a >= b;\n}\n\nexport function lessThanEqual(a, b) {\n  return a <= b;\n}\n\nexport function inTheTarget(a, b) {\n  if(typeof b !== 'object' || String(a) !== `${a}` ) throw new Error('first argument must be original type, second must be Array or Object')\n  return isObject(b) ? Object.prototype.hasOwnProperty.call(b, eliminateQuote(a)) : contains(b, a)\n}\n\nexport function bitWiseOr(a, b) {\n  return a ^ b\n}\n\nexport function setVar(name: string | number, value: any, variables: object | Array<any> ) {\n  if (variables) variables[name] = value;\n  return value;\n}\n\nexport function arrayIndex(array, index) {\n  return array[index | 0];\n}\n\nexport function condition(cond, yep, nope) {\n  return cond ? yep : nope;\n}\n\nexport function withOr(n1, n2) {\n  return n1 ? n1 : n2\n}\n\nexport function withAlso(n1, n2) {\n  return n1 ? n2 : n1\n}\n\nexport function max(...args: number[]) {\n  if (args.length === 1) {\n    return Math.max.apply(Math, args);\n  } else {\n    return Math.max.apply(Math, args);\n  }\n}\n\nexport function min(...args: number[]) {\n  if (args.length === 1) {\n    return Math.min.apply(Math, args);\n  } else {\n    return Math.min.apply(Math, args);\n  }\n}\n\nexport function arrayMap(f: (val: any, index?: number) => any, a: any[]) {\n  if (typeof f !== 'function') {\n    throw new Error('First argument is not a function');\n  }\n  if (!Array.isArray(a)) {\n    throw new Error('Second argument is not an array');\n  }\n  return a.map(function (x, i) {\n    return f(x, i);\n  });\n}\n\nexport function random(a) {\n  return Math.random() * (a || 1);\n}\n\nfunction decimalAdd(num1, num2) {\n  const num1Digits = (num1.toString().split('.')[1] || '').length;\n  const num2Digits = (num2.toString().split('.')[1] || '').length;\n  const baseNum = Math.pow(10, Math.max(num1Digits, num2Digits));\n  return (num1 * baseNum + num2 * baseNum) / baseNum;\n}","import { mapVal } from './utils/index';\nimport {\n  // 功能性\n  random, min, max, arrayMap as map,\n  // 二元\n  add, sub, mul, divide, mod, withOr, withAlso, equal, notEqual, greaterThan, lessThan, greaterThanEqual, lessThanEqual, inTheTarget, setVar, arrayIndex, bitWiseOr, strictNotEqual,\n  // 三元\n  condition,\n  strictEqual\n} from './utils/functions';\n\nconst system = {\n  functions: {\n    random,\n    min,\n    max,\n    map\n  },\n  consts: {\n    E: Math.E,\n    PI: Math.PI,\n    'true': true,\n    'false': false,\n    \"undefined\": undefined,\n    \"null\": null,\n  },\n  binaryOps: {\n    '+': add,\n    '-': sub,\n    '*': mul,\n    '/': divide,\n    '%': mod,\n    '^': bitWiseOr,\n    '||': withOr,\n    '&&': withAlso,\n    '==': equal,\n    '!=': notEqual,\n    '!==': strictNotEqual,\n    '>': greaterThan,\n    '<': lessThan,\n    '>=': greaterThanEqual,\n    '<=': lessThanEqual,\n    '=': setVar,\n    '[': arrayIndex,\n    '===': strictEqual,\n    'in': inTheTarget,\n    // 'instanceOf'\n  },\n  ternaryOps: {\n    '?': condition\n  },\n  unaryOps: {\n    '+': (v): number => +v,\n    '-': (v): number => -v,\n    '!': (v): boolean => !v,\n    '~': (v): number => ~v,\n    '++': (v): number => v += 1,\n    '--': (v): number => v -= 1,\n    'typeof': (v): string => typeof v,\n    'return': v => v,\n    sin: Math.sin,\n    cos: Math.cos,\n    tan: Math.tan,\n    pow: Math.pow,\n  },\n  syntaxOperator: {\n    ':': null,\n    '.': null,\n  }\n}\n\nexport default system;\n\n/** @desc 功能函数 */\nexport type TypeFunction = typeof system.functions;\n/** @desc 常量设置 */\nexport type TypeConst = typeof system.consts;\n/** @desc 一元运算符 */\nexport type TypeUnary = typeof system.unaryOps;\n/** @desc 二元运算符 */\nexport type TypeBinary = typeof system.binaryOps;\n/** @desc 三元运算符 */\nexport type TypeTernary = typeof system.ternaryOps;\n/** @desc 词法操作符 */\nexport type TypeSyntax = typeof system.syntaxOperator;\n\n// 有些运算符不能被修改。\n\nconst excludeOperator = ['=', '['];\n\n/** @desc 运算符映射表 */\nexport const operatorMap = mapVal(Object.create(null), {\n  functions: system.functions,\n  consts: system.consts,\n  unaryOps: system.unaryOps,\n  ternaryOps: system.ternaryOps,\n}, (maps, key, val) => {\n  if(!excludeOperator.includes(key)) {\n    maps[key] = val\n  }\n})","import system from '../systemMap';\nimport { contains } from './index';\n\nconst BLACK_LIST_OPERATORS = []\nconst supportOperator = Array.from(new Set(\n  [].concat(\n    Object.keys(system.unaryOps).filter(item => !/\\b\\w+\\b/.test(item)),\n    Object.keys(system.binaryOps),\n    Object.keys(system.ternaryOps),\n    Object.keys(system.syntaxOperator)\n  )\n    .filter(op => !contains(BLACK_LIST_OPERATORS, op))\n    .sort((a, b) => b.length - a.length)\n))\n\nexport const whitespaceReg = /(\\t|\\n|\\r|\\s+)/;\nexport const booleanReg = /^(false|true)/;\nexport const commentReg = /^\\/\\*(.*)\\*\\//;\nexport const stringReg = /^\\'(.*?)\\'|^\\\"(.*?)\\\"/;\nexport const stringGreedyReg = /^\\'(.*)\\'|^\\\"(.*)\\\"/;\n// export const regExpReg = /^ExecReg\\((.*)\\)/;\n\nexport const number2bitReg = /^(0b[0|1]{1,})$/;\nexport const number8bitReg = /^(0[0-7]{1,})$/;\nexport const number010bitReg = /^(0\\d*[8-9]{1,}\\d*(\\.\\d+)?)$/; // 0开头的十进制 019 038 078\nexport const number10bitReg = /(^([1-9]\\d*(\\.\\d+)|(\\d*(\\.\\d+)?)))/; // 1-9 或者.开头的十进制\nexport const number16bitReg = /^(0x[0-9a-fA-F]{1,})$/;\n\nexport const variableReg = /^((_|$)?[0-9a-zA-Z|$|_]{1,})/;\nexport const operatorReg = new RegExp(`^(${supportOperator.map(r => `(\\\\${/\\b\\w+\\b/.test(r) ? r : r.split('').join('\\\\')})`).join('|')})`);\nexport const unaryMapReg = new RegExp(`^(${Object.keys(system.unaryOps).filter(item => /\\b\\w+\\b/.test(item)).join('|')})`);\nexport const unarySymbolMapReg = new RegExp(`^(${Object.keys(system.unaryOps).filter(item => !(/\\b\\w+\\b/.test(item))).map(r => `\\\\s*\\\\${r}\\\\s*`).join('|')})`);\n\nexport const execNumberReg = (reg: RegExp, expr: string, cb: <T>(v: T) => T = (v => v)): string | undefined => {\n  reg.lastIndex = 0;\n  const result = reg.exec(expr);\n  if (result === null || result[0] === '') {\n    return cb(undefined)\n  } else {\n    return cb(result[1])\n  }\n}\n\nexport const isUnaryOpeator = ({ value }) => Object.prototype.hasOwnProperty.call(system.unaryOps, value)\nexport const isBinaryOpeator = ({ value }) => Object.prototype.hasOwnProperty.call(system.binaryOps, value)\nexport const isTernaryOpeator = ({ value }) => Object.prototype.hasOwnProperty.call(system.ternaryOps, value)","import Ceval from './index';\nimport { TypeTokenStream, TypeToken, TypeInstruction } from './interface';\nimport Instruction, { INSTR_EXPRE, INSTR_FUNCDEF, INSTR_PLAIN, INSTR_VARNAME, INSTR_NAME, INSTR_FUNCALL, INSTR_OBJECT, INSTR_OPERA1, INSTR_MEMBER, INSTR_OPERA2, INSTR_OPERA3, INSTR_ARRAY, INSTR_NUMBER, INSTR_VAR } from './instruction';\nimport { TOKEN_OPERATOR, TOKEN_NAME, TOKEN_SQUARE, TOKEN_PAREN, TOKEN_NUMBER, TOKEN_STRING, TOKEN_COMMA, TOKEN_SEMICOLON, TOKEN_END, TOKEN_CURLY, TOKEN_VAR, TOKEN_FUNC } from './token';\nimport { unarySymbolMapReg, isUnaryOpeator } from './utils/regExp';\nimport { contains } from './utils/index';\n\n/**\n * 解析器\n * @export\n * @class Parser\n */\nexport default class Parser {\n  /**\n   * @desc 当前TOKEN指针\n   */\n  current: TypeInstruction | null = null;\n\n  /**\n   * @desc 暂存指针\n   */\n  savedCurrent: TypeInstruction | null = null;\n\n  /**\n   * @desc 下个TOKEN指针对象\n   */\n  nextToken: TypeToken | null = null;\n\n  /**\n   * @desc 暂存next TOKEN\n   */\n  savedNextToken: TypeToken | null = null;\n\n  constructor(public ceval: Ceval, public tokens: TypeTokenStream, exprInstr: TypeInstruction[]) {\n    this.next();\n    \n    this.inspectParseEnd(exprInstr)\n  }\n\n  /**\n   * 检查是否解析完毕\n   */\n  private inspectParseEnd = (exprInstr: TypeInstruction[]) => {\n    do {\n      this.parseExpression(exprInstr)\n    } while (this.tokens.pos < this.tokens.expression.length) \n  }\n\n  /**\n   * 生成实例解析表达式，简化调用方式\n   */\n  static generatorParser = (parser: Ceval, tokens: TypeTokenStream, exprInstr: TypeInstruction[]): Parser => {\n    return new Parser(parser, tokens, exprInstr)\n  }\n\n  /**\n   * Token指针向下位移\n   */\n  next = (): TypeToken => {\n    this.current = this.nextToken;\n    return (this.nextToken = this.tokens.next())\n  }\n\n  /**\n   * 条件是否命中Token真值\n   */\n  matchToken = (value: undefined | ((value: TypeToken) => boolean) | string | number): boolean => {\n    if (value === undefined) {\n      return true\n    } else if (Array.isArray(value)) {\n      return value.indexOf(this.nextToken.value) !== -1\n    } else if (typeof value === 'function') {\n      return value(this.nextToken)\n    } else if (typeof value === 'string' || typeof value === 'number') {\n      return value === this.nextToken.value\n    } else {\n      return false\n    }\n  }\n\n  /**\n   * 预判是否符合预期，符合&&解析下个token\n   * @param {type} 约定的类型\n   * @param {value} 明确规定的字面值，比如 ] , =\n   * @param {next} 允许next？\n   */\n  accept = (type: string, value?, next = true): boolean => {\n    if (this.nextToken && (this.nextToken.type === type) && this.matchToken(value)) {\n      if (next) this.next()\n      return true\n    }\n    return false\n  }\n\n  /**\n   * accpet + 断言\n   * @param {type} 约定的类型\n   * @param {value} 明确规定的字面值，比如 ] , =\n   */\n  expect = (type: string, value?): never | void => {\n    if (!this.accept(type, value)) {\n      const { line, column } = this.tokens.getCoordinates()\n      this.printLog(`> line:${line} column:${column - 1} \"${this.current.value}\"\\nThe next tag should be \"${value}\", But the reality is`, `${this.nextToken.type === TOKEN_END ? 'empty content' : `\"${this.nextToken.value}\"`}`\n        , console.error\n      )\n      throw new Error('Unexpected Tag');\n    }\n  }\n\n  /**\n   * 暂存指针，在某些情况下单一的nextToken已经不满足预判情况，例如 typeof(add) || add(1, 2) || 1 + add;\n   */\n  temporarySaved = (): void => {\n    this.savedCurrent = this.current;\n    this.savedNextToken = this.nextToken;\n\n    this.tokens.temporarySaved()\n  }\n\n  /**\n   * 恢复指针\n   */\n  restore = (): void => {\n    this.current = this.savedCurrent;\n    this.nextToken = this.savedNextToken;\n    this.tokens.restore()\n    return undefined\n  }\n\n  /**\n   * 解析表达式整个句柄\n   * @see 如果只是求参或解析字面量，请从Conditional开始，因为MultipleEvaluation可能会误会语义，e.g.{a:1,b:2}中的“1,b:2”\n   */\n  parseExpression = (instr: TypeInstruction[]): void => {\n    const exprInstr: TypeInstruction[] = []\n    \n    this.parseMultipleEvaluation(exprInstr)\n    exprInstr.forEach(exp => (instr.push(exp)))\n  }\n\n  /**\n   * 解析连续求值 例如 数组字面量 [1, 2, [3, 4, 5]]  (1, 2, 3)\n   */\n  parseMultipleEvaluation = (exprInstr: TypeInstruction[]): void => {\n    this.parseAssignmentExpression(exprInstr)\n    while (this.accept(TOKEN_COMMA, ',')) {\n      this.parseConditionalExpression(exprInstr)\n    }\n  }\n\n  /**\n   * 解析变量赋值表达式 TOKEN_OPERATOR name = 1\n   */\n  parseAssignmentExpression = (exprInstr: TypeInstruction[]): void => {\n    this.parseConditionalExpression(exprInstr)\n    while (this.accept(TOKEN_OPERATOR, '=')) {\n      let ident\n      if (exprInstr[exprInstr.length - 1].type === INSTR_VAR) {\n        ident = exprInstr.pop()\n      }\n      if (exprInstr[exprInstr.length - 1].type === INSTR_NAME) {\n        exprInstr.push(new Instruction(INSTR_VARNAME, exprInstr.pop().value))\n      }\n      const instr: TypeInstruction[] = []\n      this.parseExpression(instr)\n      exprInstr.push(new Instruction(INSTR_EXPRE, instr))\n      if (ident) exprInstr.push(ident)\n      exprInstr.push(new Instruction(INSTR_OPERA2, '='))\n    }\n  }\n\n  /**\n   * 解析三目运算符\n   */\n  parseConditionalExpression = (exprInstr: TypeInstruction[]): void => {\n    this.parseOrExpression(exprInstr)\n    while (this.accept(TOKEN_OPERATOR, '?')) {\n      const trueBranch = [];\n      const falseBranch = [];\n      this.parseConditionalExpression(trueBranch);\n      this.expect(TOKEN_OPERATOR, ':');\n      this.parseConditionalExpression(falseBranch);\n      exprInstr.push(new Instruction(INSTR_EXPRE, trueBranch));\n      exprInstr.push(new Instruction(INSTR_EXPRE, falseBranch));\n      exprInstr.push(new Instruction(INSTR_OPERA3, '?'));\n    }\n  }\n\n  /**\n   * 解析 ||\n   */\n  parseOrExpression = (exprInstr: TypeInstruction[]): void => {\n    this.parseAndExpression(exprInstr)\n    while (this.accept(TOKEN_OPERATOR, '||')) {\n      var branch = []\n      this.parseAndExpression(branch)\n      exprInstr.push(new Instruction(INSTR_EXPRE, branch))\n      exprInstr.push(new Instruction(INSTR_OPERA2, '||'))\n    }\n  }\n\n  /**\n   * 解析 &&\n   */\n  parseAndExpression = (exprInstr: TypeInstruction[]): void => {\n    this.parseBitwiseOrExpression(exprInstr)\n    while (this.accept(TOKEN_OPERATOR, '&&')) {\n      var branch = []\n      this.parseBitwiseOrExpression(branch)\n      exprInstr.push(new Instruction(INSTR_EXPRE, branch))\n      exprInstr.push(new Instruction(INSTR_OPERA2, '&&'))\n    }\n  }\n\n  /**\n   * 解析 ^ 按位异或\n   */\n  parseBitwiseOrExpression = (exprInstr: TypeInstruction[]): void => {\n    this.parseBitwiseAndExpression(exprInstr)\n    while (this.accept(TOKEN_OPERATOR, '^')) {\n      this.parseBitwiseAndExpression(exprInstr)\n      exprInstr.push(new Instruction(INSTR_OPERA2, '^'))\n    }\n  }\n\n  /**\n   * 解析 & 按位与\n   */\n  parseBitwiseAndExpression = (exprInstr: TypeInstruction[]): void => {\n    this.parseEqualExpression(exprInstr)\n    while (this.accept(TOKEN_OPERATOR, '&')) {\n      this.parseBitwiseAndExpression(exprInstr)\n      exprInstr.push(new Instruction(INSTR_OPERA2, '&'))\n    }\n  }\n\n  /**\n   * 解析判等 ['==', '===', '!=', '!==']\n   */\n  parseEqualExpression = (exprInstr: TypeInstruction[]): void => {\n    this.parseCompareExpression(exprInstr)\n    while (this.accept(TOKEN_OPERATOR, ['==', '===', '!=', '!=='])) {\n      var op = this.current\n      this.parseCompareExpression(exprInstr)\n      exprInstr.push(new Instruction(INSTR_OPERA2, op.value))\n    }\n  }\n\n  /**\n   * 解析比较运算符 ['<', '<=', '>=', '>']\n   */\n  parseCompareExpression = (exprInstr: TypeInstruction[]): void => {\n    this.parseInOrAtExpression(exprInstr)\n    while (this.accept(TOKEN_OPERATOR, ['<', '<=', '>=', '>'])) {\n      var op = this.current\n      this.parseInOrAtExpression(exprInstr)\n      exprInstr.push(new Instruction(INSTR_OPERA2, op.value))\n    }\n  }\n\n  /**\n  * 解析或运算符 ['||', '@'] @待补位\n  */\n  parseInOrAtExpression = (exprInstr: TypeInstruction[]): void => {\n    this.parseBitwiseMoveExpression(exprInstr)\n    while (this.accept(TOKEN_OPERATOR, ['in'/** ,\"@\" */])) {\n      var op = this.current\n      this.parseBitwiseMoveExpression(exprInstr)\n      exprInstr.push(new Instruction(INSTR_OPERA2, op.value))\n    }\n  }\n\n  /**\n   * 解析按位移 [\">>\", \">>>\", \"<<\"]\n   */\n  parseBitwiseMoveExpression = (exprInstr: TypeInstruction[]): void => {\n    this.parseAddOrSubExpression(exprInstr)\n    while (this.accept(TOKEN_OPERATOR, [\">>\", \">>>\", \"<<\"])) {\n      var op = this.current\n      this.parseAddOrSubExpression(exprInstr)\n      exprInstr.push(new Instruction(INSTR_OPERA2, op.value))\n    }\n  }\n\n  /**\n   * 解析加减法 + -\n   */\n  parseAddOrSubExpression = (exprInstr: TypeInstruction[]): void => {\n    this.parseMulOrDivExpression(exprInstr)\n    while (this.accept(TOKEN_OPERATOR, [\"+\", \"-\"])) {\n      var op = this.current\n      this.parseMulOrDivExpression(exprInstr)\n      exprInstr.push(new Instruction(INSTR_OPERA2, op.value))\n    }\n  }\n\n  /**\n   * 解析乘除取模 * / %\n   */\n  parseMulOrDivExpression = (exprInstr: TypeInstruction[]): void => {\n    this.parseUnaryExpression(exprInstr)\n    while (this.accept(TOKEN_OPERATOR, [\"*\", \"/\", \"%\"])) {\n      var op = this.current\n      this.parseUnaryExpression(exprInstr)\n      exprInstr.push(new Instruction(INSTR_OPERA2, op.value))\n    }\n  }\n\n  /**\n   * 解析一元运算符 [+, ++, +, -, !, ~, cos, tan, typeof]\n   */\n  parseUnaryExpression = (exprInstr: TypeInstruction[]): void => {\n    this.temporarySaved();\n    if (this.accept(TOKEN_OPERATOR, isUnaryOpeator)) {// 内置函数调用\n      if (unarySymbolMapReg.test(this.current.value)) { // +, ++, +, -, !, ~,\n        const op = this.current\n        this.parseUnaryExpression(exprInstr); // 兼容 ++-1\n        exprInstr.push(new Instruction(INSTR_OPERA1, op.value))\n      } else if (this.accept(TOKEN_PAREN, '(', false)) { // typeof(\n        this.restore()\n        this.parsePersetFuncCallExpression(exprInstr)\n      } else if (\n        [TOKEN_COMMA, TOKEN_SEMICOLON, TOKEN_END].indexOf(this.nextToken.type) !== -1 || // typeof, typeof; typeof\n        (this.nextToken.type === TOKEN_PAREN && this.nextToken.value === ')') // typeof)\n      ) {\n        this.restore();\n        this.parseField(exprInstr);\n      }\n    } else {\n      this.parseOuterFunctionCallExpression(exprInstr) // 外置函数 || 内声明函数\n    }\n  }\n\n  /**\n   * 外置函数调用\n   */\n  parseOuterFunctionCallExpression = (exprInstr: TypeInstruction[]) => {\n    this.parseMemberAccessExpression(exprInstr)\n    if (this.current.type === TOKEN_NAME && this.accept(TOKEN_PAREN, '(', false)) {\n      this.parseArguments(exprInstr)\n    }\n  }\n\n  /**\n   * 解析内置函数调用\n   */\n  parsePersetFuncCallExpression = (exprInstr: TypeInstruction[]): void => {\n    if (this.accept(TOKEN_OPERATOR, isUnaryOpeator)) {\n      var op = this.current\n      this.parseField(exprInstr)\n      exprInstr.push(new Instruction(INSTR_OPERA1, op.value))\n    } else {\n      this.parseMemberAccessExpression(exprInstr); // a.b()\n      this.parseArguments(exprInstr)\n    }\n  }\n\n  /**\n   * 解析调用函数的实参\n   */\n  parseArguments = (exprInstr: TypeInstruction[]): void => {\n    while (this.accept(TOKEN_PAREN, '(')) {\n      if (this.accept(TOKEN_PAREN, ')')) {\n        // 立即调用\n        exprInstr.push(new Instruction(INSTR_FUNCALL, 0)) // 参数长度 \n      } else {\n        let count = 0\n        while (!this.accept(TOKEN_PAREN, ')')) {\n          do {\n            this.parseConditionalExpression(exprInstr);\n            count++;\n          } while (this.accept(TOKEN_COMMA))\n        }\n        exprInstr.push(new Instruction(INSTR_FUNCALL, count))\n      }\n    }\n  }\n\n  /**\n   * 解析成员访问符 . []\n   */\n  parseMemberAccessExpression = (exprInstr: TypeInstruction[]): void => {\n    this.parseField(exprInstr);\n    while (\n      this.accept(TOKEN_OPERATOR, '.') ||\n      (contains<string>([TOKEN_SQUARE, TOKEN_NAME], this.current.type) && this.accept(TOKEN_SQUARE, '['))) {\n      if (!this.ceval.getOptions().allowMemberAccess) {\n        throw new Error(`options \"allowMemberAccess\": You have disabled member access and cannot use syntax such as \"a.b\" \"a['b']\"`)\n      }\n      if (this.current.value === '.') {\n        this.expect(TOKEN_NAME); // a.name ✔️  a.1×\n        exprInstr.push(new Instruction(INSTR_MEMBER, this.current.value))\n      } else if (this.current.value === '[') {\n        this.parseExpression(exprInstr);\n        this.expect(TOKEN_SQUARE, ']')\n        exprInstr.push(new Instruction(INSTR_MEMBER))\n      }\n    }\n  }\n\n\n  /**\n   * 解析字面值、字段值 number||string||operator(typeof cos tan)||[1,2,3]|| {a:1,b:{}} || (expression) || function abs() {}\n   */\n  parseField = (exprInstr: TypeInstruction[]): void => {\n    if (this.accept(TOKEN_OPERATOR, isUnaryOpeator)) {\n      // 内置前缀运算符 cos tan - +\n      exprInstr.push(new Instruction(INSTR_OPERA1, this.current.value));\n    } else if (this.accept(TOKEN_NAME)) {\n      // 变量名称\n      exprInstr.push(new Instruction(INSTR_NAME, this.current.value));\n    } else if (this.accept(TOKEN_NUMBER)) {\n      // 数字类型\n      exprInstr.push(new Instruction(INSTR_NUMBER, this.current.value));\n    } else if (this.accept(TOKEN_STRING)) {\n      // 字符串类型 \\\"name\\\"\n      exprInstr.push(new Instruction(INSTR_PLAIN, this.current.value));\n    } else if (this.accept(TOKEN_PAREN, '(')) {\n      // 圆括号，调用 或 表达式(a=1)\n      this.parseExpression(exprInstr);\n      this.expect(TOKEN_PAREN, ')');\n    } else if (this.accept(TOKEN_SQUARE, '[')) {\n      //  数组字面量\n      this.parseArrayLiteralDeclaration(exprInstr)\n    } else if (this.accept(TOKEN_CURLY, '{', false)) {\n      // Object字面量声明\n      this.parseObjectLiteralDeclaration(exprInstr)\n    } else if (this.accept(TOKEN_CURLY, '}', false)) {\n      // return\n    } else if (this.accept(TOKEN_VAR, ['const', 'var', 'let'])) {\n      const identifier = this.current\n      this.parseField(exprInstr)\n      exprInstr.push(new Instruction(INSTR_VAR, identifier.value))\n    } else if (this.accept(TOKEN_FUNC, undefined, false)) {\n      this.parseFunctionDefinedDeclaration(exprInstr);\n    } else {\n      throw new Error('unexpected ' + this.nextToken);\n    }\n  }\n\n  /**\n   * 解析对象字面量 { a: 1, b: 2, c: {}}\n   */\n  parseArrayLiteralDeclaration = (exprInstr: TypeInstruction[]) => {\n    // Array字面量声明 TODO: 需要和 obj['a'] 做区分\n    const instr = []\n    if (this.accept(TOKEN_SQUARE, ']')) { // []\n      exprInstr.push(new Instruction(INSTR_ARRAY, instr))\n      return\n    }\n    this.parseExpression(instr)\n    this.expect(TOKEN_SQUARE, ']')\n    exprInstr.push(new Instruction(INSTR_ARRAY, instr))\n  }\n\n  /**\n   * 解析对象字面量 { a: 1, b: 2, c: {}}\n   */\n  parseObjectLiteralDeclaration = (exprInstr: TypeInstruction[]) => {\n    while (this.accept(TOKEN_CURLY, '{')) {\n      const instr = {}\n      if (this.accept(TOKEN_CURLY, '}')) { // {}\n        exprInstr.push(new Instruction(INSTR_OBJECT, instr))\n        return\n      }\n      while (this.accept(TOKEN_NAME) || this.accept(TOKEN_NUMBER) || this.accept(TOKEN_STRING)) {\n        const key = this.current.value\n        this.expect(TOKEN_OPERATOR, ':');\n        instr[key] = [];\n        if (this.accept(TOKEN_CURLY, '{', false)) {\n          this.parseObjectLiteralDeclaration(instr[key])\n        } else {\n          debugger\n          this.parseConditionalExpression(instr[key]);\n        }\n        this.accept(TOKEN_COMMA, ',');\n      }\n      this.expect(TOKEN_CURLY, '}');\n      this.accept(TOKEN_SEMICOLON, ';')\n      exprInstr.push(new Instruction(INSTR_OBJECT, instr))\n    }\n  }\n\n  /**\n   * 解析函数声明\n   */\n  parseFunctionDefinedDeclaration = (expreInstr: TypeInstruction[]) => {\n    while (this.accept(TOKEN_FUNC)) {\n      if (this.accept(TOKEN_NAME)) { // function fn(){}\n        const funcName = this.current.value;\n        const instr = []; // 参数 与 函数体\n        if (this.accept(TOKEN_PAREN, '(')) {\n          do {\n            this.parseField(instr); // TODO fn(a=1) 待兼容\n          } while (this.accept(TOKEN_COMMA))\n          this.expect(TOKEN_PAREN, ')')\n        }\n        this.parseFunctionBodyExpression(instr)\n        expreInstr.push(new Instruction(INSTR_FUNCDEF, instr))\n        expreInstr.push(new Instruction(INSTR_FUNCDEF, funcName))\n      }\n    }\n  }\n\n  /**\n   * 解析函数体, 花括号 { }, 应该视作一个新的作用域. // TODO: 可作为单独作用域体\n   */\n  parseFunctionBodyExpression = (exprInstr: TypeInstruction[]) => {\n    if (this.accept(TOKEN_CURLY, '{')) {\n      const instr = [];\n      do {\n        this.parseExpression(instr)\n      } while (this.accept(TOKEN_SEMICOLON, ';'))\n      this.expect(TOKEN_CURLY, '}')\n      this.accept(TOKEN_SEMICOLON, ';')\n      exprInstr.push(new Instruction(INSTR_EXPRE, instr))\n    }\n  }\n\n  /**\n   * 增加提示\n   */\n  printLog = (msg: string, tip: string, c: Console[\"log\" | \"error\" | \"warn\"] = console.log) => {\n    c(`${msg} %c${tip}`, `margin: 0 .5em;text-decoration-line: underline;text-decoration-color: red;text-decoration-style: wavy;line-height: 2em;color: red;`)\n  }\n}","/** @desc javascript保留字 */\nexport const jsWord = {\n  \"abstract\": false,\n  \"arguments\": false,\n  \"boolean\": false,\n  \"break\": false,\n  \"byte\": false,\n  \"case\": false,\n  \"catch\": false,\n  \"char\": false,\n  \"class\": false,\n  \"const\": false,\n  \"continue\": false,\n  \"debugger\": false,\n  \"default\": false,\n  \"delete\": false,\n  \"do\": false,\n  \"double\": false,\n  \"else\": false,\n  \"enum\": false,\n  \"eval\": false,\n  \"export\": false,\n  \"extends\": false,\n  \"final\": false,\n  \"finally\": false,\n  \"float\": false,\n  \"for\": false,\n  \"function\": false,\n  \"goto\": false,\n  \"if\": false,\n  \"implements\": false,\n  \"import\": false,\n  \"in\": true,\n  \"instanceof\": false,\n  \"int\": false,\n  \"interface\": false,\n  \"let\": false,\n  \"long\": false,\n  \"native\": false,\n  \"new\": false,\n  \"null\": false,\n  \"package\": false,\n  \"private\": false,\n  \"protected\": false,\n  \"public\": false,\n  \"return\": true,\n  \"short\": false,\n  \"static\": false,\n  \"super\": false,\n  \"switch\": false,\n  \"synchronized\": false,\n  \"this\": false,\n  \"throw\": false,\n  \"throws\": false,\n  \"transient\": false,\n  \"try\": false,\n  \"typeof\": false,\n  \"var\": false,\n  \"void\": false,\n  \"volatile\": false,\n  \"while\": false,\n  \"with\": false,\n  \"yield\": false\n}\n\n/** @desc JavaScript属性方法保留字 */\nexport const jsAttr = {\n  \"Array\": false, \n  \"Date\": false, \n  \"eval\": false, \n  \"function\": false, \n  \"hasOwnProperty\": false,\n  \"Infinity\": false, \n  \"isFinite\": false, \n  \"isNaN\": false, \n  \"isPrototypeOf\": false, \n  \"length\": false,\n  \"Math\": false, \n  \"NaN\": false, \n  \"name\": false, \n  \"Number\": false, \n  \"Object\": false,\n  \"prototype\": false, \n  \"String\": false, \n  \"toString\": false, \n  \"undefined\": false, \n  \"valueOf\": false, \n}\n\n/** @desc java保留字 */\nexport const javaWord = {\n  \"getClass\": false, \n  \"java\": false, \n  \"JavaArray\": false, \n  \"javaClass\": false, \n  \"JavaObject\": false, \n  \"JavaPackage\": false\n}\n\n/** @desc window保留字 */\nexport const windowWord = {\n  \"alert\": false, \n  \"all\": false, \n  \"anchor\": false, \n  \"anchors\": false, \n  \"area\": false,\n  \"assign\": false, \n  \"blur\": false, \n  \"button\": false, \n  \"checkbox\": false, \n  \"clearInterval\": false,\n  \"clearTimeout\": false, \n  \"clientInformation\": false, \n  \"close\": false, \n  \"closed\": false, \n  \"confirm\": false,\n  \"constructor\": false, \n  \"crypto\": false, \n  \"decodeURI\": false, \n  \"decodeURIComponent\": false, \n  \"defaultStatus\": false,\n  \"document\": false, \n  \"element\": false, \n  \"elements\": false, \n  \"embed\": false, \n  \"embeds\": false,\n  \"encodeURI\": false, \n  \"encodeURIComponent\": false, \n  \"escape\": false, \n  \"event\": false, \n  \"fileUpload\": false,\n  \"focus\": false, \n  \"form\": false, \n  \"forms\": false, \n  \"frame\": false, \n  \"innerHeight\": false,\n  \"innerWidth\": false, \n  \"layer\": false, \n  \"layers\": false, \n  \"link\": false, \n  \"location\": false,\n  \"mimeTypes\": false, \n  \"navigate\": false, \n  \"navigator\": false, \n  \"frames\": false, \n  \"frameRate\": false,\n  \"hidden\": false, \n  \"history\": false, \n  \"image\": false, \n  \"images\": false, \n  \"offscreenBuffering\": false,\n  \"open\": false, \n  \"opener\": false, \n  \"option\": false, \n  \"outerHeight\": false, \n  \"outerWidth\": false,\n  \"packages\": false, \n  \"pageXOffset\": false, \n  \"pageYOffset\": false, \n  \"parent\": false, \n  \"parseFloat\": false,\n  \"parseInt\": false, \n  \"password\": false, \n  \"pkcs11\": false, \n  \"plugin\": false, \n  \"prompt\": false,\n  \"propertyIsEnum\": false, \n  \"radio\": false, \n  \"reset\": false, \n  \"screenX\": false, \n  \"screenY\": false,\n  \"scroll\": false, \n  \"secure\": false, \n  \"select\": false, \n  \"self\": false, \n  \"setInterval\": false,\n  \"setTimeout\": false, \n  \"status\": false, \n  \"submit\": false, \n  \"taint\": false, \n  \"text\": false,\n  \"textarea\": false, \n  \"top\": false, \n  \"unescape\": false, \n  \"untaint\": false, \n  \"window\": false\n}","import Token, { TOKEN_END, TOKEN_STRING, TOKEN_COMMA, TOKEN_FUNC, TOKEN_CURLY, TOKEN_PAREN, TOKEN_SEMICOLON, TOKEN_VAR, TOKEN_NUMBER, TOKEN_NAME, TOKEN_OPERATOR, TOKEN_SQUARE } from './token';\nimport { TypeToken, TypeCeval } from './interface';\nimport { whitespaceReg, commentReg, stringReg, number2bitReg, number8bitReg, number10bitReg, number16bitReg, variableReg, operatorReg, unaryMapReg, booleanReg, execNumberReg, number010bitReg, stringGreedyReg } from './utils/regExp';\nimport { jsWord, jsAttr } from './utils/reservedWord';\nimport { contains, isPalindrome, filterUndefine } from './utils/index';\n\n/**\n * 语法解析\n * @class TokenStream\n */\nexport default class TokenStream {\n  // 当前指针下标\n  pos = 0;\n\n  // 当前解析character\n  current: null | TypeToken = null;\n\n  // 暂存指针\n  savedPosition = 0;\n\n  // 暂存解析character，在某些情况下做预判比如, cos是函数，cos() || map(cos) “cos)” 可能被函数parser判定为语法错误\n  savedCurrent: null | TypeToken = null;\n\n  // eslint-disable-next-line\n  constructor(public ceval: TypeCeval, public expression: string) { }\n\n  /**\n   * @desc 适用语法校验检查\n   * @memberof TokenStream\n   */\n  checkNextAccessGrammar = (): TypeToken => {\n    const {pos} = this;\n    const {current} = this\n\n    const next = this.next();\n\n    this.current = current;\n    this.pos = pos\n\n    return next\n  }\n\n  /**\n   * @desc 某些情况下做正则优化，比如 operator 至多3位，所以截取3位再匹配\n   * @param len 获取的长度\n   * @param offset 位移\n   * @see charAt与substr性能对比 https://jsperf.com/substr-or-charat\n   * @memberof TokenStream\n   */\n  getSomeCode = (len = 1, offset = 0): string => {\n    const start = offset + this.pos\n    const { length } = this.expression;\n    // debugger\n    return this.expression.substr(start, (start + len) > length ? length - start : len)\n  }\n\n  /**\n   * @desc 获取首个单词\n   * @memberof TokenStream\n   */\n  getFirstWord = (): string => {\n    const result = this.expression.substr(this.pos).match(/\\b\\w*\\b/)\n    return result ? result[0] : ''\n  }\n\n  /**\n   * 创建新的fieldType实例\n   * @memberof TokenStream\n   */\n  newToken = (type: string, value: any, pos?: number): TypeToken => {\n    return new Token(type, value, pos != null ? pos : this.pos);\n  }\n\n  /**\n   * 解析下一个 field\n   * @memberof TokenStream\n   */\n  next = (): TypeToken => {\n    if (!this.expression.length) {\n      return this.newToken(TOKEN_NAME, \"undefined\")\n    }\n    if (this.pos >= this.expression.length) {\n      return this.newToken(TOKEN_END, 'END');\n    }\n\n    if (this.isWhiteSpace() || this.isComment()) {\n      return this.next()\n    } else if (\n      this.isNumber() ||\n      this.isString() ||\n      this.isBoolean() ||\n      this.isParenthesis() ||\n      this.isComma() ||\n      this.isOperator() ||\n      this.isSemicolon() ||\n      this.isConst() ||\n      this.isVariable() ||\n      this.isFunctionDefined() ||\n      this.isName()\n    ) {\n      return this.current\n    } else {\n      this.parseError(`unknown character: ${this.expression.charAt(this.pos)}`, SyntaxError)\n    }\n  }\n\n  temporarySaved = () => {\n    this.savedPosition = this.pos;\n    this.savedCurrent = this.current;\n  }\n\n  restore = () => {\n    this.pos = this.savedPosition;\n    this.current = this.savedCurrent\n  }\n\n  /**\n   * 过滤空格 \\t \\r \\n\n   * @memberof TokenStream\n   */\n  isWhiteSpace = (): boolean => {\n    const matchWS = whitespaceReg.exec(this.getSomeCode())\n    while (matchWS && matchWS[1]) {\n      this.pos++\n      return true\n    }\n    return false\n  }\n\n  /**\n   * 过滤注释 /*  *\\/\n   * @memberof TokenStream\n   */\n  isComment = (): boolean => {\n    if (this.getSomeCode() === '/' && this.getSomeCode(1, 1) === '*') {\n      commentReg.lastIndex = 0;\n      const matchResult = commentReg.exec(this.getSomeCode(Infinity))\n      if (matchResult && matchResult[1]) {\n        this.pos += matchResult[1].length + 2 + 2; // /*matchResult[1]*/\n        return true\n      }\n    }\n    return false\n  }\n\n  /**\n   * 过滤空格 \\t \\r \\n\n   * @memberof TokenStream\n   */\n  isBoolean = (): boolean => {\n    const matchWS = booleanReg.exec(this.getSomeCode())\n    while (matchWS && matchWS[1]) {\n      this.pos++\n      return true\n    }\n    return false\n  }\n\n  /**\n   * 申明变量 TODO:support\n   * @memberof TokenStream\n   */\n  isVariable = (): boolean => {\n    const word = this.getFirstWord()\n    if (contains<string>(['const', 'var', 'let'], word)) {\n      this.pos += word.length;\n      this.current = this.newToken(TOKEN_VAR, word)\n      const nextToken = this.checkNextAccessGrammar()\n\n      if (nextToken.type !== TOKEN_NAME) {\n        throw new Error(`\"${word}\" ${nextToken.value} : This syntax Not as expected, should be \"${TOKEN_NAME}\", but is \"${nextToken}\"`)\n      }\n      return true\n    }\n    return false\n  }\n\n  /**\n   * 数字 \n   * @see 说明 需要考虑到 2进制0b10100 === 8进制024 === 10进制20 === 16进制0x14 === 10e0 === 20.000\n   * @memberof TokenStream\n   */\n  isNumber = (): boolean => {\n    const first = this.getSomeCode()\n    let number: string | undefined\n    let bit: number\n    const expr = this.getSomeCode(this.expression.length - this.pos)\n\n    if ((/\\d|\\./.test(first) === false) || (first === '.' && /\\.\\d/.test(this.getSomeCode(2)) === false)) return false\n\n    const [n] = expr.match(/^(0(x|b)+[0-9a-zA-Z]{1,})|(^0?\\d*(\\.\\d+)?)/); // 019 可能会被8进制拦截掉01， 所以必须要做^$\n\n    number10bitReg.lastIndex = 0;\n    if (first === '0' && n.length > 1 && !(/^0\\.\\d/.test(n))) { // 0.x 不是进制数\n      if (contains<string>(['b', 'x'], this.getSomeCode(1, 1)) && this.getSomeCode(1, n.length) === '.') {\n        // 0b0101.1 0xaf.1 ❌\n        // 099.1 属于十进制 ✅\n        this.parseError(`number '${n}' cannot is a floating point number, but actual is: '${n}${this.getSomeCode(3, n.length)}'`, SyntaxError)\n        return false\n      }\n\n      if (number2bitReg.test(n)) {\n        // 2进制\n        // @see 0b01 0b1110\n        number = execNumberReg(number2bitReg, n)\n        bit = number === undefined ? undefined : 2\n      } else if (number8bitReg.test(n)) {\n        // 8进制\n        // @see 012 || 077 ✅ \b\n        // @warn 080 || 079 ❌都是十进制  并非8进制\n        number = execNumberReg(number8bitReg, n)\n        bit = number === undefined ? undefined : 8\n      } else if (number16bitReg.test(n)) {\n        // 16进制 \n        // @see 0xadf\n        number = execNumberReg(number16bitReg, n)\n        bit = number === undefined ? undefined : 16\n      } else if (number010bitReg.test(n)) {\n        // 0开头十进制 \n        // @see 079 || 080  ✅\n        // @warn 03.1 || 00.1 || 00.  ❌ \n        number = execNumberReg(number010bitReg, n)\n        bit = number === undefined ? undefined : 10\n      } else {\n        this.parseError('number bitbase parser error', SyntaxError)\n        return false\n      }\n      if (number !== undefined && !this.ceval.getOptions().endableBitNumber) { // 给出准确的warning \n        throw new Error(`options \"endableBitNumber\": You have disabled bitbase number parsing, Not allowed ${number}`)\n      }\n    } else if (number10bitReg.test(expr)) { // 十进制\n      // 100 || 100.1 || 0.1 || .100 || .0  ✅ \n      // parseFloat是支持 0100.1 的。\n      number = execNumberReg(number10bitReg, expr)\n      bit = number === undefined ? undefined : 10\n    } else {\n      \n      return false\n    }\n\n    if (bit === 10) {\n      this.current = this.newToken(TOKEN_NUMBER, parseFloat(number))\n    } else {\n      this.current = this.newToken(TOKEN_NUMBER, parseInt(number.replace('0b', '').replace('0x', ''), bit))\n    }\n\n    this.pos += number.length\n    return true\n  }\n\n  /**\n   * 字符串\n   * @see '' \\'\\' \\\"\\\" \\\"\\'\\'\\\"\n   * @memberof TokenStream\n   */\n  isString = (): boolean => {\n    const first = this.getSomeCode()\n    const expr = this.getSomeCode(Infinity)\n    let matchString: RegExpExecArray | undefined\n    let strContent: string | undefined\n    if (first === '\\\"' || first === '\\'') {\n        // 一种情况是需要贪婪匹配 \\'\\'a\\'\\', 判断是否需要贪婪匹配\n      matchString = stringGreedyReg.exec(expr)\n      strContent = filterUndefine(matchString[1], matchString[2])\n      if (!isPalindrome(strContent)) {\n        // 不属于回文字符串则需要重新做惰性匹配\n        // 另一种则需要惰性 \"'a', 'b'\" => \"a\"\n        matchString = stringReg.exec(expr);\n        strContent = filterUndefine(matchString[1], matchString[2])\n      }\n\n      if (strContent !== undefined) {\n        this.current = this.newToken(TOKEN_STRING, strContent, this.pos)\n        this.pos += (strContent.length + first.length * 2); // \"\" 是没有长度的，会导致Token指针一直处于 \"\" \n        return true\n      }\n    }\n\n    return false\n  }\n\n  isFunctionDefined = (): boolean => {\n    const word = this.getFirstWord();\n    if(word === 'function') {\n      // TODO: 初期只支持 第一种, 同时支持 function fn() {} || const a = () => {} || const b = function(){}\n      this.current = this.newToken(TOKEN_FUNC, undefined);\n      this.pos+=word.length\n      const nextToken = this.checkNextAccessGrammar(); \n      if(nextToken.type !== TOKEN_NAME) {\n        this.parseError('function definition should have function name')\n        return false\n      }\n      return true;\n    }\n    return false\n  }\n  \n  /**\n   * 变量，可能是名称\n   * @see 遵循变量申明规范 可以以 $_ 开头，其他可以是 $_数字字母 ，排除保留字\n   * @memberof TokenStream\n   */\n  isName = (): boolean => {\n    const first = this.getSomeCode()\n    let result\n    if (first === '_' || first === '$' || /^[a-zA-Z]/.test(first)) {\n      variableReg.lastIndex = 0\n      result = variableReg.exec(this.getSomeCode(Infinity))\n    }\n\n    if (result === undefined || result === null || typeof result[1] !== \"string\") {\n      return false\n    }\n\n    if (jsWord[result[1]] === false) {\n      // 检测到保留字\n      this.parseError(`parser an reserved word: ${result[1]}`)\n      return false\n    }\n\n    if (jsAttr[result[1]] === false) {\n      // 检测到window属性 TODO: 应该命中 window.xxx\n      this.parseError(`parser an window native attributes or methods: ${result[1]}`)\n      return false\n    }\n\n    this.pos += result[1].length\n    this.current = this.newToken(TOKEN_NAME, result[1])\n    return true\n  }\n\n  /**\n   * 内置常量\n   * @see const 例如 true false PI undefined null\n   * @memberof TokenStream\n   */\n  isConst = (): boolean => {\n    const keys = Object.keys(this.ceval.consts)\n\n    const result = new RegExp(`^(${keys.join('|')})`).exec(this.getSomeCode(Infinity))\n\n    if (result && result[1]) {\n      this.current = this.newToken(TOKEN_NAME, result[1])\n      this.pos += result[1].length;\n      return true\n    }\n\n    return false\n  }\n\n  /**\n   * 分号\n   * @see ;\n   * @memberof TokenStream\n   */\n  isSemicolon = () => {\n    var first = this.getSomeCode();\n    if (first === ';') {\n      this.current = this.newToken(TOKEN_SEMICOLON, ';');\n      this.pos++;\n      return true;\n    }\n    return false;\n  };\n\n  /**\n   * 逗号,\n   * @see ,\n   * @memberof TokenStream\n   */\n  isComma = () => {\n    var first = this.getSomeCode();\n    if (first === ',') {\n      this.current = this.newToken(TOKEN_COMMA, ',');\n      this.pos++;\n      return true;\n    }\n    return false;\n  };\n\n  /**\n   * 圆、方括号\n   * @see ;\n   * @memberof TokenStream\n   */\n  isParenthesis = () => {\n    var first = this.getSomeCode();\n    if (contains(['(', ')'], first)) {\n      this.current = this.newToken(TOKEN_PAREN, first);\n    } else if (contains(['[', ']'], first)) {\n      this.current = this.newToken(TOKEN_SQUARE, first);\n    } else if (contains(['{', '}'], first)) {\n      this.current = this.newToken(TOKEN_CURLY, first);\n    } else {\n      return false\n    }\n    this.pos++;\n    return true;\n  };\n\n  /**\n   * 判断是否操作符 \n   * @see 操作符 + - * / || % ^ ? : . > < = >= <= | == === != !== in\n   * @memberof TokenStream\n   */\n  isOperator = (): boolean => {\n    const str = this.getSomeCode(Infinity);\n    let result: RegExpExecArray\n    if (operatorReg.test(str)) {\n      operatorReg.lastIndex = 0;\n      result = operatorReg.exec(str)\n    } else if (unaryMapReg.test(str)) {\n      unaryMapReg.lastIndex = 0\n      result = unaryMapReg.exec(str)\n    }\n\n    if (!result) return false\n\n    if(this.ceval.getOptions().endableOperators === false) {\n      throw new Error(`options \"endableOperators\": You disabled the operator, Therefore, \"${result[1]}\" it can not be used`)\n    }\n\n    this.pos += result[1].length\n    this.current = this.newToken(TOKEN_OPERATOR, result[1])\n    return true\n  }\n\n  /**\n   * 获取当前character定位\n   * @memberof TokenStream\n   */\n  getCoordinates = (): { line: number, column: number } => {\n    let line = 0;\n    let column = 0;\n    let index = -1;\n\n    do {\n      line++;\n      column = this.pos - index;\n      index = this.expression.substr(index + 1).indexOf('\\n');\n    } while (index >= 0 && index < this.pos)\n\n    return {\n      line,\n      column\n    };\n  };\n\n  /**\n   * 解析出错\n   * @memberof TokenStream\n   */\n  parseError = (msg: string, ErrorType: ErrorConstructor | SyntaxErrorConstructor | TypeErrorConstructor = Error) => {\n    var coords = this.getCoordinates();\n    throw new ErrorType('parse error [' + coords.line + ':' + coords.column + '] => ' + msg);\n  };\n\n}","import Instruction, { INSTR_EXPRE, INSTR_FUNCDEF, INSTR_EXECUTBODY, INSTR_VARNAME, INSTR_NAME, INSTR_OBJECT, INSTR_ARRAY, INSTR_FUNCALL, INSTR_MEMBER, INSTR_NUMBER, INSTR_VAR, INSTR_OPERA2, INSTR_PLAIN, INSTR_OPERA3, INSTR_OPERA1 } from './instruction';\nimport Ceval from './index';\nimport { hasAttribute, mapToObject, merge } from './utils/index';\n\n/**\n * 运算\n * @export calculation\n * @param {Instruction[]} tokens    TokenQueue\n * @param {object} [values={}]      数据池\n * @param {Ceval} ceval             instance of eval\n * @param {boolean} [statis=false]  true全量返回 默认false\n * @param {object} [scope={}]       作用域\n * @returns result or result[]\n */\nexport default function calculation(tokens: Instruction<any>[], values = Object.create(null), ceval: Ceval, statis = false, scope = Object.create(null)) {\n  if (window.name) {\n   console.group('calclation Dev')\n    console.log('tokens: ', tokens);\n    console.log('values', values)\n    console.log('scope', scope)\n   console.groupEnd()\n  }\n  const options = ceval.getOptions();\n  const { unaryOps, binaryOps, ternaryOps } = ceval\n  const stack = [];\n  const { length } = tokens;\n  let n1, n2, n3;\n  let fn: undefined | Function | Instruction<CustomFunc>\n  for (let i = 0; i < length; i++) {\n    const item = tokens[i];\n    const { type, value } = item || {};\n\n    if (!type) {\n      stack.push(item)\n      continue\n    }\n    switch(type) {\n      case INSTR_NUMBER: \n      case INSTR_PLAIN:\n      case INSTR_VARNAME: {\n        stack.push(value);\n        break\n      }\n      case INSTR_NAME: {\n        // 变量名称，范围作用域有 consts values _scope 后者优先\n        if (hasAttribute(scope, value)) {\n          // scope,作用域\n          stack.push(scope[value])\n        } else if (hasAttribute(values, value)) {\n          // customVal\n          stack.push(values[value])\n        } else if (hasAttribute(ceval.consts, value)) {\n          // 常量\n          stack.push(ceval.consts[value])\n        } else {\n          throw new Error(`${value} is not defined in values or consts`)\n        }\n        break\n      }\n      case INSTR_OPERA1: {\n        if(stack.length === 0) break;\n        // 一元运算，需要一个操作数\n        [n1] = stack.splice(-1, 1);\n        fn = specifyAttr<Function>(value, [values, unaryOps], options.allowOperatorsCovered)\n        stack.push(fn(n1));\n        break\n      }\n      case INSTR_OPERA2: { // 二元运算，需要有两个操作数\n        if(stack.length < 2) break;\n        [n1, n2] = stack.splice(-2, 2)\n        fn = specifyAttr<Function>(value, [values, binaryOps], options.allowOperatorsCovered)\n        // fn = binaryOps[value] as Function;\n        if (value === '&&') { // 1&&0&&3可能是连续的\n          stack.push(fn(n1, calculation([n2], values, ceval, statis, scope), false)); // true && true && false\n        } else if (value === '=') {\n          // 如果当前作用域含有该属性，作用域优先\n          fn(n1, n2, hasAttribute(scope, n1) ? scope : values)\n        } else {\n          stack.push(fn(n1, calculation([n2], values, ceval, statis, scope), options));\n        }\n        break\n      }\n      case INSTR_OPERA3: { // 三元运算，需要有三个操作数\n        if(stack.length < 3) break;\n        [n1, n2, n3] = stack.splice(-3, 3)\n        fn = specifyAttr<Function>(value, [values, ternaryOps], options.allowOperatorsCovered)\n        stack.push(fn(n1, n2, n3));\n        break\n      }\n      case INSTR_EXPRE: { // 表达式\n        stack.push(calculation(item.value, values, ceval, statis, scope))\n        break;\n      }\n      case INSTR_MEMBER: { // 成员访问\n        if (stack.length < 1) break;\n        if (!value) { // a[\"b\"]\n          [n1, n2] = stack.splice(-2, 2);\n          stack.push(n1[n2]);\n          break\n        }\n        n1 = stack.pop(); // a.b\n        stack.push(n1[value])\n        break\n      }\n      case INSTR_ARRAY: { // 数组字面量\n        stack.push(calculation(value, values, ceval, true, scope))\n        break\n      }\n      case INSTR_OBJECT: { // 对象字面量\n        const instr = Object.create(null)\n        Object.keys(value).forEach(key => {\n          instr[key] = calculation(value[key], values, ceval, statis,scope)\n        })\n        stack.push(instr)\n        break\n      }\n      case INSTR_VAR: { // 赋值语句\n        [n1, n2] = stack.splice(-2, 2)\n        switch (value) {\n          case 'let':\n          case 'const': {\n            // let const的行为待定义, let 和 const 应该挂载到作用域上，而var 可以赋给 values \n            // TODO: 需要判定assgin给scope还是values\n            if (hasAttribute(scope, n1)) {\n              console.warn(`${n1} already statement in consts or scope`)\n            }\n            scope[n1] = n2;\n            break\n          }\n          case 'var': {\n            values[n1] = n2; \n            break\n          }\n          default: {\n            console.warn('Unexpected statement identifier')\n            break;\n          }\n        }\n        break\n      }\n      case INSTR_FUNCALL: { // 自声明函数调用，区分是外部函数还是内声明函数\n        const args = stack.splice(-value, value);\n        fn = stack.pop();\n        // if(args.length !== value) {} // TODO: 参数不够的情况 warning\n        if (typeof fn === 'function') {\n          // 外置函数，即在consts内声明的\n          stack.push(fn.apply(null, args))\n          continue\n        } else if(fn.value instanceof CustomFunc) { // 内置函数\n          fn.value.updateScope(args)\n          stack.push(fn.value.invokeBody())\n        }\n        break\n      }\n      case INSTR_FUNCDEF: { // 函数定义\n        if (typeof value !== 'string') {\n          stack.push(value); // 函数体\n          continue\n        }\n        if (stack.length === 0) return\n        const _scope = merge(Object.create(null), scope); // 作用域\n  \n        // done: 嵌套函数区分, 挂载到当前_scope上\n        _scope[value] = new Instruction<CustomFunc>(INSTR_EXECUTBODY, new CustomFunc(stack.pop(), values, _scope, ceval))\n  \n        Object.assign(scope, _scope)\n        break\n      }\n      default: {\n        const _val = Symbol('_init') // 值可能就是undefined，做区分\n        let val = _val\n        try {\n          val = item.value\n        } catch (e) {\n          // item = undefined | null | false | true ....\n        }\n        if (val !== _val) {\n          stack.push(val)\n        }\n      }\n    }\n  }\n  return statis ? stack : stack[0];\n}\n\nfunction specifyAttr<T>(value: string, [customValues, defaultValues], shouldCustom = false): T {\n  let fn: T\n  if(shouldCustom && hasAttribute(customValues, value)) {\n    fn = customValues[value] as T;\n  } else {\n    fn = defaultValues[value] as T;\n  }\n  return fn\n};\n\nclass CustomFunc {\n  args: string[];\n\n  constructor(public func: Instruction<any>[], public values: Record<string, any>, public _scope: Record<string, any>, public ceval: Ceval) {\n    const args = this.func.splice(0, func.length - 1)\n    this.args = calculation(args, mapToObject(args, (k) => k), ceval, true)\n    this._scope = merge(mapToObject(args), _scope);\n  }\n\n  updateScope = (scope: any[]) => {\n    // 假设 Object attribute 是不保证顺序的。\n    this.args.forEach((key, index) => {\n      if(hasAttribute(this._scope, key)) {\n        this._scope[key] = scope[index]\n      }\n    });\n  }\n\n  invokeBody = () => {\n    return calculation(this.func, this.values, this.ceval, false, this._scope)\n  }\n}\n","import { getTime } from './index';\n\nconst [date, time] = getTime()\n\nexport default {\n  now: Date.now(),\n  date,\n  time,\n}","import Parser from './parser';\nimport Ceval from './index';\nimport Token from './token';\nimport TokenStream from './token-stream';\nimport Instruction from './instruction';\n\nexport type TypeParser = InstanceType<typeof Parser>\n\nexport type TypeCeval = InstanceType<typeof Ceval>\n\nexport type TypeToken = InstanceType<typeof Token>\n\nexport type TypeTokenStream = InstanceType<typeof TokenStream>\n\nexport type TypeInstruction = Instruction<any>\n\nexport type KeyOfValType<T extends object> = T[keyof T];\n\nexport class CevalOptions {\n  /**\n   * @desc 允许使用运算符\n   * @requires false\n   * @todo TODO: 做控制\n   * @type {boolean}\n   */\n  endableOperators?: boolean = true;\n\n  /**\n   * @desc 允许启用多位进制Number\n   * @requires false\n   * @todo TODO: 做控制\n   * @type {boolean}\n   */\n  endableBitNumber?: boolean = true;\n\n  /**\n   * @desc 允许访问成员\n   * @requires false\n   * @todo TODO: 做控制\n   * @type {boolean}\n   */\n  allowMemberAccess?: boolean = true;\n\n  /**\n   * @desc 允许默认放大计算，以处理四则运算的结果 e.g 0.1+0.2 !== 0.3  || 1.0-0.9 !== 0.1\n   * 在超出边界的情况下（ta > Number.MAX_SAFE_INTEGER || ta < Number.MIN_SAFE_INTEGER）会不做处理，还原四则运算\n   * @requires false \n   * @type {boolean}\n   */\n  allowHandleNumberPrecision?: boolean = true;\n\n  /**\n   * @desc 默认不允许操作符被 presetValue 覆盖\n   * @see 某些情况下开发者想制定更加精确的计算,例如BigInt,那么就在根据operatorMap声明presetValue={'+':Function}\n   * @requires false\n   * @type {boolean}\n   * @memberof CevalOptions\n   */\n  allowOperatorsCovered?: boolean = false;\n  \n  /**\n   * @desc 当没有返回值或为undefined时触发默认返回值\n   * @requires false\n   * @todo done\n   * @type {any}\n   */\n  defaultReturnValues?: any = '' // done\n}","import cloneDeep from 'lodash/cloneDeep'\nimport Parser from './parser';\nimport systemMap, { TypeUnary, TypeBinary, TypeTernary, TypeConst, TypeFunction, operatorMap } from './systemMap';\nimport TokenStream from './token-stream';\nimport calculation from './calculation';\nimport presetVariable from './utils/presetVariable';\nimport { merge } from './utils/index';\nimport { CevalOptions, TypeInstruction } from './interface';\n\nexport default class Ceval {\n  unaryOps: TypeUnary;\n\n  binaryOps: TypeBinary;\n\n  ternaryOps: TypeTernary;\n\n  consts: TypeConst;\n\n  functions: TypeFunction;\n\n  /**\n   * 操作符映射表，可做在presetValues覆盖运算\n   */\n  operatorMap = operatorMap;\n\n  private currentValues: Record<string, any> = cloneDeep(presetVariable);\n\n  constructor(private options: Readonly<CevalOptions> = {}) {\n    Object.assign(this, systemMap);\n    merge(this.options, new CevalOptions())\n  }\n\n  /**\n   * 查询支持的操作符方法名称, 可做覆盖\n   * @param ops 操作符\n   * @memberof Ceval\n   */\n  getSupportOperationMap = (ops: string): null | Function => {\n    return Object.prototype.hasOwnProperty.call(operatorMap, ops) ? operatorMap[ops] : null\n  }\n\n  /**\n   * 解析字符串，对外暴露方法\n   * @memberof Ceval\n   */\n  parseString = (expression: string, values: Record<string, any> = {}) => {\n    const instr: TypeInstruction[] = [];\n    \n    Parser.generatorParser(this, new TokenStream(this, expression), instr)\n\n    return this.injectValueToCalc(instr, values)\n  }\n\n  /**\n   * 获取当前数据池 预置+外置+内声明\n   * @returns 数据池\n   * @memberof Ceval\n   */\n  getCurrentValues = (): Record<string, any> => cloneDeep(this.currentValues);\n\n  /**\n   * 传入指令集开始计算\n   * @param {tokens} Instruction[] 指令集\n   * @param {Record<string, any>} [values={}] 数据池\n   * @memberof Ceval\n   */\n  private injectValueToCalc = (tokens: TypeInstruction[], values: Record<string, any> = {}): any => {\n    // @TODO 检查敏感字\n    // @TODO 检查关键字\n    this.updatePresetValues(values);\n    const result = calculation(tokens, this.currentValues, this)\n    return result === undefined ? this.options.defaultReturnValues : result\n  }\n\n  /**\n   * Update PresetValues\n   * @param {values} Record<string, any> 配置\n   * @memberof Ceval\n   */\n  updatePresetValues = (values: Record<string, any>): void => {\n    Object.assign(this.currentValues, values)\n  }\n\n  /**\n   * Update Option\n   * @param {Options} CevalOptions 配置\n   * @memberof Ceval\n   */\n  updateOptions = (Options: Partial<CevalOptions>): void => {\n    Object.assign(this.options, Options)\n  }\n\n  /**\n   * get Options\n   * @memberof Ceval\n   */\n  getOptions = () => {\n    return cloneDeep(this.options);\n  }\n\n} "],"names":["Instruction","[object Object]","type","value","this","TOKEN_END","TOKEN_COMMA","TOKEN_SEMICOLON","Token","index","window","_debug","console","log","toString","Object","prototype","isObject","obj","call","contains","arr","some","v","merge","target","source","keys","forEach","key","val","hasOwnProperty","Array","isArray","filterUndefine","args","one","item","undefined","hasAttribute","name","mapToObject","defaultValue","length","Set","Error","join","create","getDigitLength","num","split","checkBounds","number","Number","MAX_SAFE_INTEGER","MIN_SAFE_INTEGER","getBaseNum","a","b","baseNum","Math","pow","max","unwantedHandlePercision","isInteger","system","functions","random","min","apply","f","map","x","i","consts","E","PI","true","false","null","binaryOps","+","options","allowHandleNumberPrecision","round","-","*","/","%","^","||","n1","n2","&&","==","!=","!==",">","<",">=","<=","=","variables","[","array","===","in","String","eliminateQuote","str","quoteReg","test","result","exec","ternaryOps","?","cond","yep","nope","unaryOps","!","~","++","--","typeof","return","sin","cos","tan","syntaxOperator",":",".","excludeOperator","operatorMap","mapVal","data","object","cb","maps","includes","BLACK_LIST_OPERATORS","supportOperator","from","concat","filter","op","sort","whitespaceReg","booleanReg","commentReg","stringReg","stringGreedyReg","number2bitReg","number8bitReg","number010bitReg","number10bitReg","number16bitReg","variableReg","operatorReg","RegExp","r","unaryMapReg","unarySymbolMapReg","execNumberReg","reg","expr","lastIndex","isUnaryOpeator","Parser","ceval","tokens","exprInstr","parseExpression","pos","expression","current","nextToken","next","indexOf","matchToken","accept","line","column","getCoordinates","printLog","error","savedCurrent","savedNextToken","temporarySaved","restore","instr","parseMultipleEvaluation","exp","push","parseAssignmentExpression","parseConditionalExpression","ident","pop","parseOrExpression","trueBranch","falseBranch","expect","parseAndExpression","branch","parseBitwiseOrExpression","parseBitwiseAndExpression","parseEqualExpression","parseCompareExpression","parseInOrAtExpression","parseBitwiseMoveExpression","parseAddOrSubExpression","parseMulOrDivExpression","parseUnaryExpression","parsePersetFuncCallExpression","parseField","parseOuterFunctionCallExpression","parseMemberAccessExpression","parseArguments","count","getOptions","allowMemberAccess","parseArrayLiteralDeclaration","parseObjectLiteralDeclaration","identifier","parseFunctionDefinedDeclaration","expreInstr","funcName","parseFunctionBodyExpression","msg","tip","c","inspectParseEnd","parser","jsWord","abstract","arguments","boolean","break","byte","case","catch","char","class","const","continue","debugger","default","delete","do","double","else","enum","eval","export","extends","final","finally","float","for","function","goto","if","implements","import","instanceof","int","interface","let","long","native","new","package","private","protected","public","short","static","super","switch","synchronized","throw","throws","transient","try","var","void","volatile","while","with","yield","jsAttr","Date","Infinity","isFinite","isNaN","isPrototypeOf","NaN","valueOf","TokenStream","len","offset","start","substr","match","newToken","isWhiteSpace","isComment","isNumber","isString","isBoolean","isParenthesis","isComma","isOperator","isSemicolon","isConst","isVariable","isFunctionDefined","isName","parseError","charAt","SyntaxError","savedPosition","matchWS","getSomeCode","matchResult","word","getFirstWord","checkNextAccessGrammar","first","bit","n","endableBitNumber","parseFloat","parseInt","replace","matchString","strContent","surplusStr","substring","isPalindrome","endableOperators","ErrorType","coords","calculation","values","statis","scope","group","groupEnd","stack","n3","fn","splice","specifyAttr","allowOperatorsCovered","warn","CustomFunc","updateScope","invokeBody","_scope","assign","_val","Symbol","e","customValues","defaultValues","shouldCustom","func","k","date","time","o","now","getFullYear","getMonth","getDate","getHours","getMinutes","getSeconds","t","getTime","CevalOptions","cloneDeep","presetVariable","ops","generatorParser","injectValueToCalc","currentValues","updatePresetValues","defaultReturnValues","Options","systemMap"],"mappings":"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"}