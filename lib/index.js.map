{"version":3,"file":"index.js","sources":["../src/instruction.ts","../src/token.ts","../src/utils/index.ts","../src/utils/functions.ts","../src/systemMap.ts","../src/utils/regExp.ts","../src/parser.ts","../src/utils/reservedWord.ts","../src/token-stream.ts","../src/calculation.ts","../src/utils/presetVariable.ts","../src/interface.ts","../src/index.ts"],"sourcesContent":["/** @desc 一元运算符 */\nexport const INSTR_OPERA1 = 'INSTR_OP1';\n/** @desc 二元运算符 */\nexport const INSTR_OPERA2 = 'INSTR_OP2';\n/** @desc 三元运算符 */\nexport const INSTR_OPERA3 = 'INSTR_OP3';\n\n/** @desc 数字 */\nexport const INSTR_NUMBER = 'INSTR_NUMBER';\n/** @desc 数组字面量 */\nexport const INSTR_ARRAY = 'INSTR_ARRAY';\n/** @desc 对象字面量 */\nexport const INSTR_OBJECT = 'INSTR_OBJECT';\n/** @desc 简单类型，表示不用处理 */\nexport const INSTR_PLAIN = 'INSTR_PLAIN';\n\n/** @desc 对象成员访问 */\nexport const INSTR_MEMBER = 'INSTR_MEMBER';\n\n/** @desc 表达式, 内置表达式 */\nexport const INSTR_EXPRE = 'INSTR_EXPRE';\n\n/** @desc 变量类型 const let var */\nexport const INSTR_VAR = 'INSTR_VAR';\n/** @desc 变量名称, 区别是内声明 TODO: var obj = {} */\nexport const INSTR_VARNAME = 'INSTR_VARNAME';\n/** @desc 变量名称, 取值, 没有经过声明的名称，例如 undefined, null, 以及数据池中的数据 */\nexport const INSTR_NAME = 'INSTR_NAME';\n\n/** @desc 函数调用 */\nexport const INSTR_FUNCALL = 'INSTR_FUNCALL'; // TODO: 函数声明\n/** @desc 函数定义指令 */\nexport const INSTR_FUNCDEF = 'INSTR_FUNCDEF';\n/** @desc 函数执行体 */\nexport const INSTR_EXECUTBODY = 'INSTR_EXECUTBODY';\n\n\n/**\n * @desc 指令实例\n */\nexport default class Instruction<T extends any> {\n\n  value: T;\n\n  constructor(public type: string, value?: any) {\n    this.value = (value !== undefined && value !== null) ? value : 0;\n  }\n}\n\n","/** @desc 结束标记 */\nexport const TOKEN_END = 'TOKEN_END';\n/** @desc 操作符类型 */\nexport const TOKEN_OPERATOR = 'TOKEN_OP';\n/** @desc 数字类型 */\nexport const TOKEN_NUMBER = 'TOKEN_NUMBER';\n/** @desc 字符串类型 */\nexport const TOKEN_STRING = 'TOKEN_STRING';\n/** @desc 圆括号，调用 */\nexport const TOKEN_PAREN = 'TOKEN_PAREN';\n/** @desc 方括号，成员访问 [] */\nexport const TOKEN_SQUARE = 'TOKEN_SQUARE';\n/** @desc 花括号，字面量声明 */\nexport const TOKEN_CURLY = 'TOKEN_CURLY';\n/** @desc 逗号 , */\nexport const TOKEN_COMMA = 'TOKEN_COMMA';\n/** @desc 变量 , */\nexport const TOKEN_VAR = 'TOKEN_VAR';\n/** @desc 变量名称 */\nexport const TOKEN_NAME = 'TOKEN_NAME';\n/** @desc 函数定义 */\nexport const TOKEN_FUNC = 'TOKEN_FUNC';\n/** @desc 结束标记; */\nexport const TOKEN_SEMICOLON = 'TOKEN_SEMICOLON';\n\n/**\n * tokenStream 解析阶段指令\n * @export \n * @class Token\n */\nexport default class Token {\n  constructor(public type: string, public value: any, public index: number) {\n    if ((window as any)._debug) {\n      console.log(`type: ${type}; value: ${value}; index: ${index}`)\n    }\n  }\n\n  toString = () => {\n    return this.type + ': ' + this.value;\n  };\n}\n\n","import Instruction from '../instruction';\n\nconst { toString } = Object.prototype;\n\n\nexport function isObject(obj: object): obj is object {\n  return toString.call(obj) === '[object Object]'\n}\n\n/**\n * @export\n * @template T\n * @param {T[]} arr\n * @param {T} value\n * @returns {boolean}\n */\nexport function contains<T extends any>(arr: T[], value: T): boolean {\n  return arr.some(v => v === value)\n}\n\n/**\n * 获取日期时间\n * @export getTime\n * @param {number} [offset=0] 偏移量\n * @returns {string[]} [date, time]\n */\nexport function getTime(offset = 0): string[] {\n  const o = new Date(Date.now() + offset);\n  const date = `${o.getFullYear()}-${o.getMonth() + 1}-${o.getDate()}`\n  const clock = `${o.getHours()}:${o.getMinutes()}:${o.getSeconds()}`.replace(/\\d+/g, (t) => {\n    return parseInt(t, 10) < 10 ? `0${t}`: t\n  })\n  \n  return [date, clock]\n}\n\n\n/**\n * 递归foreach\n * @export mapVal\n * @template T\n * @param {T} data\n * @param {Record<string, Record<string, any>>} object\n * @param {(data: T, key:string, val: any) => void} cb\n * @returns\n */\nexport function mapVal<T extends object>(data: T, object: object, cb: (data: T, key: string, val: any) => void) {\n  Object.keys(object).map(key => {\n    return isObject(object[key]) ? mapVal(data, object[key], cb) : cb(data, key, object[key])\n  })\n  return data\n}\n\n/**\n * 前者为主，仅合并不存在属性\n * @template T object\n * @param {T} target\n * @param {T} source\n */\nexport function merge<T>(target: T, source: T) {\n  Object.keys(source).forEach(key => {\n    const val = source[key]\n    if (Object.prototype.hasOwnProperty.call(target, key)) return\n    if (Array.isArray(val)) {\n      merge(target[key] = [], val)\n    }else if (isObject(val)) {\n      merge(target[key] = {}, val)\n    } else {\n      target[key] = val\n    }\n  })\n  return target\n}\n\n/**\n * 替换\\'\\' \\\"\\\" 在 处理 in operator 需要到\n * @param {string} str string Field\n * @returns {string} 没有对称引号的字符串\n */\nexport function eliminateQuote(str: string): string {\n  const quoteReg = /^\\\"(.*)\\\"$|^\\'(.*)\\'$/;\n  if (!quoteReg.test(str)) return str\n  const result = quoteReg.exec(str)\n  const s = result[1] !== undefined ? result[1] : result[2]\n  return eliminateQuote(s)\n}\n/**\n * 回文字符串 \\'\\'a\\'\\' ✅  \\'\\'a\\'❌\n * @param {string} str\n * @returns\n */\nexport function isPalindrome(str: string) {\n  let i = 0\n  while (contains(['\\'', '\\\"'], str.charAt(i)) && str.charAt(i) === str.charAt(str.length - 1 - i)) {\n    i++\n  }\n  const surplusStr = str.substring(i, str.length - i)\n  return surplusStr.indexOf('\\\"') === -1 && surplusStr.indexOf('\\'') === -1\n}\n\n/**\n * 返回首个有效数据， 非undefined null false true\n * @param {*} args\n */\nexport function filterUndefine(...args) {\n  let one\n  args.some(item => {\n    if (contains([undefined, null, true, false], item)) return false\n    one = item\n    return true;\n  })\n  return one\n}\n\n\nexport function hasAttribute(obj: object, name: string) {\n  return Object.prototype.hasOwnProperty.call(obj, name)\n}\n\n/**\n * Array to Object e.g. ['a', 'b'] => { a: undefined, b: undefined }\n * @param {string[]} arr \n */\nexport function mapToObject(arr: string[] | Instruction<any>[], defaultValue: undefined | ((key: string) => any) = undefined) {\n  if (typeof arr[0] === 'string' && arr.length !== [...new Set(arr as any)].length) {\n    // 参数重复\n    throw new Error(`Duplicate parameter: ${arr.join(',')}`)\n  }\n  const obj = Object.create(null)\n  arr.forEach((item) => {\n    let key\n    if (item instanceof Instruction) {\n      key = item.value\n    } else {\n      key = item\n    }\n    obj[key] = (typeof defaultValue === 'function' ? defaultValue(key) : defaultValue)\n  })\n  return obj\n}\n\nexport function someCondition(...args) {\n  const errMsg = args.pop();\n  \n  if(!args.find( d => !!d)) {\n    throw new Error(errMsg)\n  }\n}","import { contains, isObject, eliminateQuote } from './index';\nimport { CevalOptions } from '../interface';\n\nfunction getDigitLength(num: number){\n  return (num.toString().split('.')[1] || '').length;\n}\n\nfunction checkBounds(number: number) {\n  return number > Number.MAX_SAFE_INTEGER || number < Number.MIN_SAFE_INTEGER\n}\n\nfunction getBaseNum(a: number, b: number): number {\n  const baseNum = Math.pow(10, Math.max(getDigitLength(a), getDigitLength(b)));\n  if(checkBounds(a * baseNum) || checkBounds(b * baseNum)) { // 超出边界的情况不予处理\n    return 0\n  }\n  return baseNum\n}\n\nconst unwantedHandlePercision = (a, b) => {\n  // 整数不需要处理 || 非Number也不需要\n  return (Number.isInteger(a) && Number.isInteger(b)) || (typeof a !== 'number' || typeof b !== 'number')\n}\n\nexport function add(a: number, b: number, options: CevalOptions): number {\n  if(options.allowHandleNumberPrecision === false || unwantedHandlePercision(a,b)) return a + b\n  const baseNum = getBaseNum(a,b);\n  return baseNum === 0 ? a + b : (Math.round(a * baseNum) + Math.round(b * baseNum)) / baseNum \n}\n\nexport function sub(a: number, b: number, options: CevalOptions): number {\n  if(options.allowHandleNumberPrecision === false || unwantedHandlePercision(a,b)) return a - b\n  const baseNum = getBaseNum(a,b)\n  return baseNum === 0 ? a - b : (Math.round(a * baseNum) - Math.round(b * baseNum)) / baseNum;\n}\n\nexport function mul(a: number, b: number, options: CevalOptions): number {\n  if(options.allowHandleNumberPrecision === false || unwantedHandlePercision(a,b)) return a * b\n  const baseNum = getBaseNum(a,b)\n  return baseNum === 0 ? a * b : (Math.round(a * baseNum) * Math.round(b * baseNum)) / Math.pow(baseNum, 2);\n}\n\nexport function divide(a: number, b: number, options: CevalOptions): number {\n  if( options.allowHandleNumberPrecision === false || unwantedHandlePercision(a,b)) return a / b\n  const baseNum = getBaseNum(a,b)\n  return baseNum === 0 ? a / b : (Math.round(a * baseNum) / Math.round(b * baseNum));\n}\n\nexport function mod(a, b) {\n  return a % b;\n}\n\nexport function equal(a, b) {\n  // eslint-disable-next-line\n  return a == b;\n}\n\nexport function strictEqual(a, b) {\n  return a === b;\n}\n\nexport function notEqual(a, b) {\n  // eslint-disable-next-line\n  return a != b;\n}\n\nexport function strictNotEqual(a, b) {\n  return a !== b;\n}\n\nexport function greaterThan(a, b) {\n  return a > b;\n}\n\nexport function lessThan(a, b) {\n  return a < b;\n}\n\nexport function greaterThanEqual(a, b) {\n  return a >= b;\n}\n\nexport function lessThanEqual(a, b) {\n  return a <= b;\n}\n\nexport function inTheTarget(a, b) {\n  if(typeof b !== 'object' || String(a) !== `${a}` ) throw new Error('first argument must be original type, second must be Array or Object')\n  return isObject(b) ? Object.prototype.hasOwnProperty.call(b, eliminateQuote(a)) : contains(b, a)\n}\n\nexport function bitWiseOr(a, b) {\n  return a ^ b\n}\n\nexport function setVar(name: string | number, value: any, variables: object | Array<any> ) {\n  if (variables) variables[name] = value;\n  return value;\n}\n\nexport function arrayIndex(array, index) {\n  return array[index | 0];\n}\n\nexport function condition(cond, yep, nope) {\n  return cond ? yep : nope;\n}\n\nexport function withOr(n1, n2) {\n  return n1 ? n1 : n2\n}\n\nexport function withAlso(n1, n2) {\n  return n1 ? n2 : n1\n}\n\nexport function max(...args: number[]) {\n  if (args.length === 1) {\n    return Math.max.apply(Math, args);\n  } else {\n    return Math.max.apply(Math, args);\n  }\n}\n\nexport function min(...args: number[]) {\n  if (args.length === 1) {\n    return Math.min.apply(Math, args);\n  } else {\n    return Math.min.apply(Math, args);\n  }\n}\n\nexport function arrayMap(f: (val: any, index?: number) => any, a: any[]) {\n  if (typeof f !== 'function') {\n    throw new Error('First argument is not a function');\n  }\n  if (!Array.isArray(a)) {\n    throw new Error('Second argument is not an array');\n  }\n  return a.map(function (x, i) {\n    return f(x, i);\n  });\n}\n\nexport function random(a) {\n  return Math.random() * (a || 1);\n}\n\nfunction decimalAdd(num1, num2) {\n  const num1Digits = (num1.toString().split('.')[1] || '').length;\n  const num2Digits = (num2.toString().split('.')[1] || '').length;\n  const baseNum = Math.pow(10, Math.max(num1Digits, num2Digits));\n  return (num1 * baseNum + num2 * baseNum) / baseNum;\n}","import { mapVal } from './utils/index';\nimport {\n  // 功能性\n  random, min, max, arrayMap as map,\n  // 二元\n  add, sub, mul, divide, mod, withOr, withAlso, equal, notEqual, greaterThan, lessThan, greaterThanEqual, lessThanEqual, inTheTarget, setVar, arrayIndex, bitWiseOr, strictNotEqual,\n  // 三元\n  condition,\n  strictEqual\n} from './utils/functions';\n\nconst system = {\n  functions: {\n    random,\n    min,\n    max,\n    map\n  },\n  consts: {\n    E: Math.E,\n    PI: Math.PI,\n    'true': true,\n    'false': false,\n    \"undefined\": undefined,\n    \"null\": null,\n  },\n  binaryOps: {\n    '+': add,\n    '-': sub,\n    '*': mul,\n    '/': divide,\n    '%': mod,\n    '^': bitWiseOr,\n    '||': withOr,\n    '&&': withAlso,\n    '==': equal,\n    '!=': notEqual,\n    '!==': strictNotEqual,\n    '>': greaterThan,\n    '<': lessThan,\n    '>=': greaterThanEqual,\n    '<=': lessThanEqual,\n    '=': setVar,\n    '[': arrayIndex,\n    '===': strictEqual,\n    'in': inTheTarget,\n    // 'instanceOf'\n  },\n  ternaryOps: {\n    '?': condition\n  },\n  unaryOps: {\n    '+': (v): number => +v,\n    '-': (v): number => -v,\n    '!': (v): boolean => !v,\n    '~': (v): number => ~v,\n    '++': (v): number => v += 1,\n    '--': (v): number => v -= 1,\n    'typeof': (v): string => typeof v,\n    'return': v => v,\n    sin: Math.sin,\n    cos: Math.cos,\n    tan: Math.tan,\n    pow: Math.pow,\n  },\n  syntaxOperator: {\n    ':': null,\n    '.': null,\n  }\n}\n\nexport default system;\n\n/** @desc 功能函数 */\nexport type TypeFunction = typeof system.functions;\n/** @desc 常量设置 */\nexport type TypeConst = typeof system.consts;\n/** @desc 一元运算符 */\nexport type TypeUnary = typeof system.unaryOps;\n/** @desc 二元运算符 */\nexport type TypeBinary = typeof system.binaryOps;\n/** @desc 三元运算符 */\nexport type TypeTernary = typeof system.ternaryOps;\n/** @desc 词法操作符 */\nexport type TypeSyntax = typeof system.syntaxOperator;\n\n// 有些运算符不能被修改。\n\nconst excludeOperator = ['=', '['];\n\n/** @desc 运算符映射表 */\nexport const operatorMap = mapVal(Object.create(null), {\n  functions: system.functions,\n  consts: system.consts,\n  unaryOps: system.unaryOps,\n  ternaryOps: system.ternaryOps,\n}, (maps, key, val) => {\n  if(!excludeOperator.includes(key)) {\n    maps[key] = val\n  }\n})","import system from '../systemMap';\nimport { contains } from './index';\n\nconst BLACK_LIST_OPERATORS = []\nconst supportOperator = Array.from(new Set(\n  [].concat(\n    Object.keys(system.unaryOps).filter(item => !/\\b\\w+\\b/.test(item)),\n    Object.keys(system.binaryOps),\n    Object.keys(system.ternaryOps),\n    Object.keys(system.syntaxOperator)\n  )\n    .filter(op => !contains(BLACK_LIST_OPERATORS, op))\n    .sort((a, b) => b.length - a.length)\n))\n\nexport const whitespaceReg = /(\\t|\\n|\\r|\\s+)/;\nexport const booleanReg = /^(false|true)/;\nexport const commentReg = /^\\/\\*(.*?)\\*\\//;\nexport const stringReg = /^\\'(.*?)\\'|^\\\"(.*?)\\\"/;\nexport const stringGreedyReg = /^\\'(.*)\\'|^\\\"(.*)\\\"/;\n// export const regExpReg = /^ExecReg\\((.*)\\)/;\n\nexport const number2bitReg = /^(0b[0|1]{1,})$/;\nexport const number8bitReg = /^(0[0-7]{1,})$/;\nexport const number010bitReg = /^(0\\d*[8-9]{1,}\\d*(\\.\\d+)?)$/; // 0开头的十进制 019 038 078\nexport const number10bitReg = /(^([1-9]\\d*(\\.\\d+)|(\\d*(\\.\\d+)?)))/; // 1-9 或者.开头的十进制\nexport const number16bitReg = /^(0x[0-9a-fA-F]{1,})$/;\n\nexport const variableReg = /^((_|$)?[0-9a-zA-Z|$|_]{1,})/;\nexport const operatorReg = new RegExp(`^(${supportOperator.map(r => `(\\\\${/\\b\\w+\\b/.test(r) ? r : r.split('').join('\\\\')})`).join('|')})`);\nexport const unaryMapReg = new RegExp(`^(${Object.keys(system.unaryOps).filter(item => /\\b\\w+\\b/.test(item)).join('|')})`);\nexport const unarySymbolMapReg = new RegExp(`^(${Object.keys(system.unaryOps).filter(item => !(/\\b\\w+\\b/.test(item))).map(r => `\\\\s*\\\\${r}\\\\s*`).join('|')})`);\n\nexport const execNumberReg = (reg: RegExp, expr: string, cb: <T>(v: T) => T = (v => v)): string | undefined => {\n  reg.lastIndex = 0;\n  const result = reg.exec(expr);\n  if (result === null || result[0] === '') {\n    return cb(undefined)\n  } else {\n    return cb(result[1])\n  }\n}\n\nexport const isUnaryOpeator = ({ value }) => Object.prototype.hasOwnProperty.call(system.unaryOps, value)\nexport const isBinaryOpeator = ({ value }) => Object.prototype.hasOwnProperty.call(system.binaryOps, value)\nexport const isTernaryOpeator = ({ value }) => Object.prototype.hasOwnProperty.call(system.ternaryOps, value)","import Ceval from './index';\nimport { TypeTokenStream, TypeToken, TypeInstruction } from './interface';\nimport Instruction, { INSTR_EXPRE, INSTR_FUNCDEF, INSTR_PLAIN, INSTR_VARNAME, INSTR_NAME, INSTR_FUNCALL, INSTR_OBJECT, INSTR_OPERA1, INSTR_MEMBER, INSTR_OPERA2, INSTR_OPERA3, INSTR_ARRAY, INSTR_NUMBER, INSTR_VAR } from './instruction';\nimport { TOKEN_OPERATOR, TOKEN_NAME, TOKEN_SQUARE, TOKEN_PAREN, TOKEN_NUMBER, TOKEN_STRING, TOKEN_COMMA, TOKEN_SEMICOLON, TOKEN_END, TOKEN_CURLY, TOKEN_VAR, TOKEN_FUNC } from './token';\nimport { unarySymbolMapReg, isUnaryOpeator } from './utils/regExp';\nimport { contains } from './utils/index';\n\n/**\n * 解析器\n * @export\n * @class Parser\n */\nexport default class Parser {\n  /**\n   * @desc 当前TOKEN指针\n   */\n  current: TypeInstruction | null = null;\n\n  /**\n   * @desc 暂存指针\n   */\n  savedCurrent: TypeInstruction | null = null;\n\n  /**\n   * @desc 下个TOKEN指针对象\n   */\n  nextToken: TypeToken | null = null;\n\n  /**\n   * @desc 暂存next TOKEN\n   */\n  savedNextToken: TypeToken | null = null;\n\n  constructor(public ceval: Ceval, public tokens: TypeTokenStream, exprInstr: TypeInstruction[]) {\n    this.next();\n    \n    this.inspectParseEnd(exprInstr)\n  }\n\n  /**\n   * 检查是否解析完毕\n   */\n  private inspectParseEnd = (exprInstr: TypeInstruction[]) => {\n    do {\n      this.parseExpression(exprInstr)\n    } while (this.tokens.pos < this.tokens.expression.length) \n  }\n\n  /**\n   * 生成实例解析表达式，简化调用方式\n   */\n  static generatorParser = (parser: Ceval, tokens: TypeTokenStream, exprInstr: TypeInstruction[]): Parser => {\n    return new Parser(parser, tokens, exprInstr)\n  }\n\n  /**\n   * Token指针向下位移\n   */\n  next = (): TypeToken => {\n    this.current = this.nextToken;\n    return (this.nextToken = this.tokens.next())\n  }\n\n  /**\n   * 条件是否命中Token真值\n   */\n  matchToken = (value: undefined | ((value: TypeToken) => boolean) | string | number): boolean => {\n    if (value === undefined) {\n      return true\n    } else if (Array.isArray(value)) {\n      return value.indexOf(this.nextToken.value) !== -1\n    } else if (typeof value === 'function') {\n      return value(this.nextToken)\n    } else if (typeof value === 'string' || typeof value === 'number') {\n      return value === this.nextToken.value\n    } else {\n      return false\n    }\n  }\n\n  /**\n   * 预判是否符合预期，符合&&解析下个token\n   * @param {type} 约定的类型\n   * @param {value} 明确规定的字面值，比如 ] , =\n   * @param {next} 允许next？\n   */\n  accept = (type: string, value?, next = true): boolean => {\n    if (this.nextToken && (this.nextToken.type === type) && this.matchToken(value)) {\n      if (next) this.next()\n      return true\n    }\n    return false\n  }\n\n  /**\n   * accpet + 断言\n   * @param {type} 约定的类型\n   * @param {value} 明确规定的字面值，比如 ] , =\n   */\n  expect = (type: string, value?): never | boolean => {\n    if (!this.accept(type, value)) {\n      const { line, column } = this.tokens.getCoordinates()\n      this.printLog(`> line:${line} column:${column - 1} \"${this.current.value}\"\\nThe next tag should be \"${value}\", But the reality is`, `${this.nextToken.type === TOKEN_END ? 'empty content' : `\"${this.nextToken.value}\"`}`\n        , console.error\n      )\n      throw new Error('Unexpected Tag');\n    } else {\n      return true\n    }\n  }\n\n  /**\n   * 暂存指针，在某些情况下单一的nextToken已经不满足预判情况，例如 typeof(add) || add(1, 2) || 1 + add;\n   */\n  temporarySaved = (): void => {\n    this.savedCurrent = this.current;\n    this.savedNextToken = this.nextToken;\n\n    this.tokens.temporarySaved()\n  }\n\n  /**\n   * 恢复指针\n   */\n  restore = (): void => {\n    this.current = this.savedCurrent;\n    this.nextToken = this.savedNextToken;\n    this.tokens.restore()\n    return undefined\n  }\n\n  /**\n   * 解析表达式整个句柄\n   * @see 如果只是求参或解析字面量，请从Conditional开始，因为MultipleEvaluation可能会误会语义，e.g.{a:1,b:2}中的“1,b:2”\n   */\n  parseExpression = (instr: TypeInstruction[]): void => {\n    const exprInstr: TypeInstruction[] = []\n    \n    this.parseMultipleEvaluation(exprInstr)\n    exprInstr.forEach(exp => (instr.push(exp)))\n  }\n\n  /**\n   * 解析连续求值 例如 数组字面量 [1, 2, [3, 4, 5]]  (1, 2, 3)\n   */\n  parseMultipleEvaluation = (exprInstr: TypeInstruction[]): void => {\n    this.parseAssignmentExpression(exprInstr)\n    while (this.accept(TOKEN_COMMA, ',')) {\n      this.parseConditionalExpression(exprInstr)\n    }\n  }\n\n  /**\n   * 解析变量赋值表达式 TOKEN_OPERATOR name = 1\n   */\n  parseAssignmentExpression = (exprInstr: TypeInstruction[]): void => {\n    this.parseConditionalExpression(exprInstr)\n    while (this.accept(TOKEN_OPERATOR, '=')) {\n      let ident\n      if (exprInstr[exprInstr.length - 1].type === INSTR_VAR) {\n        ident = exprInstr.pop()\n      }\n      if (exprInstr[exprInstr.length - 1].type === INSTR_NAME) {\n        exprInstr.push(new Instruction(INSTR_VARNAME, exprInstr.pop().value))\n      }\n      const instr: TypeInstruction[] = []\n      this.parseExpression(instr)\n      exprInstr.push(new Instruction(INSTR_EXPRE, instr))\n      if (ident) exprInstr.push(ident)\n      exprInstr.push(new Instruction(INSTR_OPERA2, '='))\n    }\n  }\n\n  /**\n   * 解析三目运算符\n   */\n  parseConditionalExpression = (exprInstr: TypeInstruction[]): void => {\n    this.parseOrExpression(exprInstr)\n    while (this.accept(TOKEN_OPERATOR, '?')) {\n      const trueBranch = [];\n      const falseBranch = [];\n      this.parseConditionalExpression(trueBranch);\n      this.expect(TOKEN_OPERATOR, ':');\n      this.parseConditionalExpression(falseBranch);\n      exprInstr.push(new Instruction(INSTR_EXPRE, trueBranch));\n      exprInstr.push(new Instruction(INSTR_EXPRE, falseBranch));\n      exprInstr.push(new Instruction(INSTR_OPERA3, '?'));\n    }\n  }\n\n  /**\n   * 解析 ||\n   */\n  parseOrExpression = (exprInstr: TypeInstruction[]): void => {\n    this.parseAndExpression(exprInstr)\n    while (this.accept(TOKEN_OPERATOR, '||')) {\n      var branch = []\n      this.parseAndExpression(branch)\n      exprInstr.push(new Instruction(INSTR_EXPRE, branch))\n      exprInstr.push(new Instruction(INSTR_OPERA2, '||'))\n    }\n  }\n\n  /**\n   * 解析 &&\n   */\n  parseAndExpression = (exprInstr: TypeInstruction[]): void => {\n    this.parseBitwiseOrExpression(exprInstr)\n    while (this.accept(TOKEN_OPERATOR, '&&')) {\n      var branch = []\n      this.parseBitwiseOrExpression(branch)\n      exprInstr.push(new Instruction(INSTR_EXPRE, branch))\n      exprInstr.push(new Instruction(INSTR_OPERA2, '&&'))\n    }\n  }\n\n  /**\n   * 解析 ^ 按位异或\n   */\n  parseBitwiseOrExpression = (exprInstr: TypeInstruction[]): void => {\n    this.parseBitwiseAndExpression(exprInstr)\n    while (this.accept(TOKEN_OPERATOR, '^')) {\n      this.parseBitwiseAndExpression(exprInstr)\n      exprInstr.push(new Instruction(INSTR_OPERA2, '^'))\n    }\n  }\n\n  /**\n   * 解析 & 按位与\n   */\n  parseBitwiseAndExpression = (exprInstr: TypeInstruction[]): void => {\n    this.parseEqualExpression(exprInstr)\n    while (this.accept(TOKEN_OPERATOR, '&')) {\n      this.parseBitwiseAndExpression(exprInstr)\n      exprInstr.push(new Instruction(INSTR_OPERA2, '&'))\n    }\n  }\n\n  /**\n   * 解析判等 ['==', '===', '!=', '!==']\n   */\n  parseEqualExpression = (exprInstr: TypeInstruction[]): void => {\n    this.parseCompareExpression(exprInstr)\n    while (this.accept(TOKEN_OPERATOR, ['==', '===', '!=', '!=='])) {\n      var op = this.current\n      this.parseCompareExpression(exprInstr)\n      exprInstr.push(new Instruction(INSTR_OPERA2, op.value))\n    }\n  }\n\n  /**\n   * 解析比较运算符 ['<', '<=', '>=', '>']\n   */\n  parseCompareExpression = (exprInstr: TypeInstruction[]): void => {\n    this.parseInOrAtExpression(exprInstr)\n    while (this.accept(TOKEN_OPERATOR, ['<', '<=', '>=', '>'])) {\n      var op = this.current\n      this.parseInOrAtExpression(exprInstr)\n      exprInstr.push(new Instruction(INSTR_OPERA2, op.value))\n    }\n  }\n\n  /**\n  * 解析或运算符 ['||', '@'] @待补位\n  */\n  parseInOrAtExpression = (exprInstr: TypeInstruction[]): void => {\n    this.parseBitwiseMoveExpression(exprInstr)\n    while (this.accept(TOKEN_OPERATOR, ['in'/** ,\"@\" */])) {\n      var op = this.current\n      this.parseBitwiseMoveExpression(exprInstr)\n      exprInstr.push(new Instruction(INSTR_OPERA2, op.value))\n    }\n  }\n\n  /**\n   * 解析按位移 [\">>\", \">>>\", \"<<\"]\n   */\n  parseBitwiseMoveExpression = (exprInstr: TypeInstruction[]): void => {\n    this.parseAddOrSubExpression(exprInstr)\n    while (this.accept(TOKEN_OPERATOR, [\">>\", \">>>\", \"<<\"])) {\n      var op = this.current\n      this.parseAddOrSubExpression(exprInstr)\n      exprInstr.push(new Instruction(INSTR_OPERA2, op.value))\n    }\n  }\n\n  /**\n   * 解析加减法 + -\n   */\n  parseAddOrSubExpression = (exprInstr: TypeInstruction[]): void => {\n    this.parseMulOrDivExpression(exprInstr)\n    while (this.accept(TOKEN_OPERATOR, [\"+\", \"-\"])) {\n      var op = this.current\n      this.parseMulOrDivExpression(exprInstr)\n      exprInstr.push(new Instruction(INSTR_OPERA2, op.value))\n    }\n  }\n\n  /**\n   * 解析乘除取模 * / %\n   */\n  parseMulOrDivExpression = (exprInstr: TypeInstruction[]): void => {\n    this.parseUnaryExpression(exprInstr)\n    while (this.accept(TOKEN_OPERATOR, [\"*\", \"/\", \"%\"])) {\n      var op = this.current\n      this.parseUnaryExpression(exprInstr)\n      exprInstr.push(new Instruction(INSTR_OPERA2, op.value))\n    }\n  }\n\n  /**\n   * 解析一元运算符 [+, ++, +, -, !, ~, cos, tan, typeof]\n   */\n  parseUnaryExpression = (exprInstr: TypeInstruction[]): void => {\n    this.temporarySaved();\n    if (this.accept(TOKEN_OPERATOR, isUnaryOpeator)) {// 内置函数调用\n      if (unarySymbolMapReg.test(this.current.value)) { // +, ++, +, -, !, ~,\n        const op = this.current\n        this.parseUnaryExpression(exprInstr); // 兼容 ++-1\n        exprInstr.push(new Instruction(INSTR_OPERA1, op.value))\n      } else if (this.accept(TOKEN_PAREN, '(', false)) { // typeof(\n        this.restore()\n        this.parsePersetFuncCallExpression(exprInstr)\n      } else if (\n        [TOKEN_COMMA, TOKEN_SEMICOLON, TOKEN_END].indexOf(this.nextToken.type) !== -1 || // typeof, typeof; typeof\n        (this.nextToken.type === TOKEN_PAREN && this.nextToken.value === ')') // typeof)\n      ) {\n        this.restore();\n        this.parseField(exprInstr);\n      }\n    } else {\n      this.parseOuterFunctionCallExpression(exprInstr) // 外置函数 || 内声明函数\n    }\n  }\n\n  /**\n   * 外置函数调用\n   */\n  parseOuterFunctionCallExpression = (exprInstr: TypeInstruction[]) => {\n    this.parseMemberAccessExpression(exprInstr)\n    if (this.current.type === TOKEN_NAME && this.accept(TOKEN_PAREN, '(', false)) {\n      this.parseArguments(exprInstr)\n    }\n  }\n\n  /**\n   * 解析内置函数调用\n   */\n  parsePersetFuncCallExpression = (exprInstr: TypeInstruction[]): void => {\n    if (this.accept(TOKEN_OPERATOR, isUnaryOpeator)) {\n      var op = this.current\n      this.parseField(exprInstr)\n      exprInstr.push(new Instruction(INSTR_OPERA1, op.value))\n    } else {\n      this.parseMemberAccessExpression(exprInstr); // a.b()\n      this.parseArguments(exprInstr)\n    }\n  }\n\n  /**\n   * 解析调用函数的实参\n   */\n  parseArguments = (exprInstr: TypeInstruction[]): void => {\n    while (this.accept(TOKEN_PAREN, '(')) {\n      if (this.accept(TOKEN_PAREN, ')')) {\n        // 立即调用\n        exprInstr.push(new Instruction(INSTR_FUNCALL, 0)) // 参数长度 \n      } else {\n        let count = 0\n        while (!this.accept(TOKEN_PAREN, ')')) {\n          do {\n            this.parseConditionalExpression(exprInstr);\n            count++;\n          } while (this.accept(TOKEN_COMMA))\n        }\n        exprInstr.push(new Instruction(INSTR_FUNCALL, count))\n      }\n    }\n  }\n\n  /**\n   * 解析成员访问符 . []\n   */\n  parseMemberAccessExpression = (exprInstr: TypeInstruction[]): void => {\n    this.parseField(exprInstr);\n    while (\n      this.accept(TOKEN_OPERATOR, '.') ||\n      (contains<string>([TOKEN_SQUARE, TOKEN_NAME], this.current.type) && this.accept(TOKEN_SQUARE, '['))) {\n      if (!this.ceval.getOptions().allowMemberAccess) {\n        throw new Error(`options \"allowMemberAccess\": You have disabled member access and cannot use syntax such as \"a.b\" \"a['b']\"`)\n      }\n      if (this.current.value === '.') {\n        this.expect(TOKEN_NAME); // a.name ✔️  a.1×\n        exprInstr.push(new Instruction(INSTR_MEMBER, this.current.value))\n      } else if (this.current.value === '[') {\n        this.parseExpression(exprInstr);\n        this.expect(TOKEN_SQUARE, ']')\n        exprInstr.push(new Instruction(INSTR_MEMBER))\n      }\n    }\n  }\n\n\n  /**\n   * 解析字面值、字段值 number||string||operator(typeof cos tan)||[1,2,3]|| {a:1,b:{}} || (expression) || function abs() {}\n   */\n  parseField = (exprInstr: TypeInstruction[]): void => {\n    if (this.accept(TOKEN_OPERATOR, isUnaryOpeator)) {\n      // 内置前缀运算符 cos tan - +\n      exprInstr.push(new Instruction(INSTR_OPERA1, this.current.value));\n    } else if (this.accept(TOKEN_NAME)) {\n      // 变量名称\n      exprInstr.push(new Instruction(INSTR_NAME, this.current.value));\n    } else if (this.accept(TOKEN_NUMBER)) {\n      // 数字类型\n      exprInstr.push(new Instruction(INSTR_NUMBER, this.current.value));\n    } else if (this.accept(TOKEN_STRING)) {\n      // 字符串类型 \\\"name\\\"\n      exprInstr.push(new Instruction(INSTR_PLAIN, this.current.value));\n    } else if (this.accept(TOKEN_PAREN, '(')) {\n      // 圆括号，调用 或 表达式(a=1)\n      this.parseExpression(exprInstr);\n      this.expect(TOKEN_PAREN, ')');\n    } else if (this.accept(TOKEN_SQUARE, '[')) {\n      //  数组字面量\n      this.parseArrayLiteralDeclaration(exprInstr)\n    } else if (this.accept(TOKEN_CURLY, '{', false)) {\n      // Object字面量声明\n      this.parseObjectLiteralDeclaration(exprInstr)\n    } else if (this.accept(TOKEN_CURLY, '}', false)) {\n      // return\n    } else if (this.accept(TOKEN_VAR, ['const', 'var', 'let'])) {\n      const identifier = this.current\n      this.parseField(exprInstr)\n      exprInstr.push(new Instruction(INSTR_VAR, identifier.value))\n    } else if (this.accept(TOKEN_FUNC, undefined, false)) {\n      this.parseFunctionDefinedDeclaration(exprInstr);\n    } else if (this.accept(TOKEN_SEMICOLON)) {\n      // \n    } else {\n      throw new Error('unexpected ' + this.nextToken);\n    }\n  }\n\n  /**\n   * 解析对象字面量 { a: 1, b: 2, c: {}}\n   */\n  parseArrayLiteralDeclaration = (exprInstr: TypeInstruction[]) => {\n    // Array字面量声明 TODO: 需要和 obj['a'] 做区分\n    const instr = []\n    if (this.accept(TOKEN_SQUARE, ']')) { // []\n      exprInstr.push(new Instruction(INSTR_ARRAY, instr))\n      return\n    }\n    this.parseExpression(instr)\n    this.expect(TOKEN_SQUARE, ']')\n    exprInstr.push(new Instruction(INSTR_ARRAY, instr))\n  }\n\n  /**\n   * 解析对象字面量 { a: 1, b: 2, c: {}}\n   */\n  parseObjectLiteralDeclaration = (exprInstr: TypeInstruction[]) => {\n    while (this.accept(TOKEN_CURLY, '{')) {\n      const instr = {}\n      if (this.accept(TOKEN_CURLY, '}')) { // {}\n        exprInstr.push(new Instruction(INSTR_OBJECT, instr))\n        return\n      }\n      while (this.accept(TOKEN_NAME) || this.accept(TOKEN_NUMBER) || this.accept(TOKEN_STRING)) {\n        const key = this.current.value\n        this.expect(TOKEN_OPERATOR, ':');\n        instr[key] = [];\n        if (this.accept(TOKEN_CURLY, '{', false)) {\n          this.parseObjectLiteralDeclaration(instr[key])\n        } else {\n          this.parseConditionalExpression(instr[key]);\n        }\n        this.accept(TOKEN_COMMA, ',');\n      }\n      this.expect(TOKEN_CURLY, '}');\n      this.accept(TOKEN_SEMICOLON, ';')\n      exprInstr.push(new Instruction(INSTR_OBJECT, instr))\n    }\n  }\n\n  /**\n   * 解析函数声明\n   */\n  parseFunctionDefinedDeclaration = (expreInstr: TypeInstruction[]) => {\n    while (this.accept(TOKEN_FUNC)) {\n      if (this.accept(TOKEN_NAME)) { // function fn(){}\n        const funcName = this.current.value;\n        const instr = []; // 参数 与 函数体\n        if (this.accept(TOKEN_PAREN, '(')) {\n          do {\n            this.parseField(instr); // TODO fn(a=1) 待兼容\n          } while (this.accept(TOKEN_COMMA))\n          this.expect(TOKEN_PAREN, ')')\n        }\n        this.parseFunctionBodyExpression(instr)\n        expreInstr.push(new Instruction(INSTR_FUNCDEF, instr))\n        expreInstr.push(new Instruction(INSTR_FUNCDEF, funcName))\n      }\n    }\n  }\n\n  /**\n   * 解析函数体, 花括号 { }, 应该视作一个新的作用域. // TODO: 可作为单独作用域体\n   */\n  parseFunctionBodyExpression = (exprInstr: TypeInstruction[]) => {\n    if (this.accept(TOKEN_CURLY, '{')) {\n      const instr = [];\n      do {\n        this.parseExpression(instr)\n      } while (this.accept(TOKEN_SEMICOLON, ';'))\n      if(this.current.type !== TOKEN_SEMICOLON) {\n        throw new SyntaxError(`Function parse error: Function body each line must end with semicolon ';'`)\n      }\n      this.expect(TOKEN_CURLY, '}')\n      this.accept(TOKEN_SEMICOLON, ';')\n      exprInstr.push(new Instruction(INSTR_EXPRE, instr))\n    }\n  }\n\n  /**\n   * 增加提示\n   */\n  printLog = (msg: string, tip: string, c: Console[\"log\" | \"error\" | \"warn\"] = console.log) => {\n    c(`${msg} %c${tip}`, `margin: 0 .5em;text-decoration-line: underline;text-decoration-color: red;text-decoration-style: wavy;line-height: 2em;color: red;`)\n  }\n}","/** @desc javascript保留字 */\nexport const jsWord = {\n  \"abstract\": false,\n  \"arguments\": false,\n  \"boolean\": false,\n  \"break\": false,\n  \"byte\": false,\n  \"case\": false,\n  \"catch\": false,\n  \"char\": false,\n  \"class\": false,\n  \"const\": false,\n  \"continue\": false,\n  \"debugger\": false,\n  \"default\": false,\n  \"delete\": false,\n  \"do\": false,\n  \"double\": false,\n  \"else\": false,\n  \"enum\": false,\n  \"eval\": false,\n  \"export\": false,\n  \"extends\": false,\n  \"final\": false,\n  \"finally\": false,\n  \"float\": false,\n  \"for\": false,\n  \"function\": false,\n  \"goto\": false,\n  \"if\": false,\n  \"implements\": false,\n  \"import\": false,\n  \"in\": true,\n  \"instanceof\": false,\n  \"int\": false,\n  \"interface\": false,\n  \"let\": false,\n  \"long\": false,\n  \"native\": false,\n  \"new\": false,\n  \"null\": false,\n  \"package\": false,\n  \"private\": false,\n  \"protected\": false,\n  \"public\": false,\n  \"return\": true,\n  \"short\": false,\n  \"static\": false,\n  \"super\": false,\n  \"switch\": false,\n  \"synchronized\": false,\n  \"this\": false,\n  \"throw\": false,\n  \"throws\": false,\n  \"transient\": false,\n  \"try\": false,\n  \"typeof\": false,\n  \"var\": false,\n  \"void\": false,\n  \"volatile\": false,\n  \"while\": false,\n  \"with\": false,\n  \"yield\": false\n}\n\n/** @desc JavaScript属性方法保留字 */\nexport const jsAttr = {\n  \"Array\": false, \n  \"Date\": false, \n  \"eval\": false, \n  \"function\": false, \n  \"hasOwnProperty\": false,\n  \"Infinity\": false, \n  \"isFinite\": false, \n  \"isNaN\": false, \n  \"isPrototypeOf\": false, \n  \"length\": false,\n  \"Math\": false, \n  \"NaN\": false, \n  \"name\": false, \n  \"Number\": false, \n  \"Object\": false,\n  \"prototype\": false, \n  \"String\": false, \n  \"toString\": false, \n  \"undefined\": false, \n  \"valueOf\": false, \n}\n\n/** @desc java保留字 */\nexport const javaWord = {\n  \"getClass\": false, \n  \"java\": false, \n  \"JavaArray\": false, \n  \"javaClass\": false, \n  \"JavaObject\": false, \n  \"JavaPackage\": false\n}\n\n/** @desc window保留字 */\nexport const windowWord = {\n  \"alert\": false, \n  \"all\": false, \n  \"anchor\": false, \n  \"anchors\": false, \n  \"area\": false,\n  \"assign\": false, \n  \"blur\": false, \n  \"button\": false, \n  \"checkbox\": false, \n  \"clearInterval\": false,\n  \"clearTimeout\": false, \n  \"clientInformation\": false, \n  \"close\": false, \n  \"closed\": false, \n  \"confirm\": false,\n  \"constructor\": false, \n  \"crypto\": false, \n  \"decodeURI\": false, \n  \"decodeURIComponent\": false, \n  \"defaultStatus\": false,\n  \"document\": false, \n  \"element\": false, \n  \"elements\": false, \n  \"embed\": false, \n  \"embeds\": false,\n  \"encodeURI\": false, \n  \"encodeURIComponent\": false, \n  \"escape\": false, \n  \"event\": false, \n  \"fileUpload\": false,\n  \"focus\": false, \n  \"form\": false, \n  \"forms\": false, \n  \"frame\": false, \n  \"innerHeight\": false,\n  \"innerWidth\": false, \n  \"layer\": false, \n  \"layers\": false, \n  \"link\": false, \n  \"location\": false,\n  \"mimeTypes\": false, \n  \"navigate\": false, \n  \"navigator\": false, \n  \"frames\": false, \n  \"frameRate\": false,\n  \"hidden\": false, \n  \"history\": false, \n  \"image\": false, \n  \"images\": false, \n  \"offscreenBuffering\": false,\n  \"open\": false, \n  \"opener\": false, \n  \"option\": false, \n  \"outerHeight\": false, \n  \"outerWidth\": false,\n  \"packages\": false, \n  \"pageXOffset\": false, \n  \"pageYOffset\": false, \n  \"parent\": false, \n  \"parseFloat\": false,\n  \"parseInt\": false, \n  \"password\": false, \n  \"pkcs11\": false, \n  \"plugin\": false, \n  \"prompt\": false,\n  \"propertyIsEnum\": false, \n  \"radio\": false, \n  \"reset\": false, \n  \"screenX\": false, \n  \"screenY\": false,\n  \"scroll\": false, \n  \"secure\": false, \n  \"select\": false, \n  \"self\": false, \n  \"setInterval\": false,\n  \"setTimeout\": false, \n  \"status\": false, \n  \"submit\": false, \n  \"taint\": false, \n  \"text\": false,\n  \"textarea\": false, \n  \"top\": false, \n  \"unescape\": false, \n  \"untaint\": false, \n  \"window\": false\n}","import Token, { TOKEN_END, TOKEN_STRING, TOKEN_COMMA, TOKEN_FUNC, TOKEN_CURLY, TOKEN_PAREN, TOKEN_SEMICOLON, TOKEN_VAR, TOKEN_NUMBER, TOKEN_NAME, TOKEN_OPERATOR, TOKEN_SQUARE } from './token';\nimport { TypeToken, TypeCeval } from './interface';\nimport { whitespaceReg, commentReg, stringReg, number2bitReg, number8bitReg, number10bitReg, number16bitReg, variableReg, operatorReg, unaryMapReg, booleanReg, execNumberReg, number010bitReg, stringGreedyReg } from './utils/regExp';\nimport { jsWord, jsAttr } from './utils/reservedWord';\nimport { contains, isPalindrome, filterUndefine } from './utils/index';\n\n/**\n * 语法解析\n * @class TokenStream\n */\nexport default class TokenStream {\n  // 当前指针下标\n  pos = 0;\n\n  // 当前解析character\n  current: null | TypeToken = null;\n\n  // 暂存指针\n  savedPosition = 0;\n\n  // 暂存解析character，在某些情况下做预判比如, cos是函数，cos() || map(cos) “cos)” 可能被函数parser判定为语法错误\n  savedCurrent: null | TypeToken = null;\n\n  // eslint-disable-next-line\n  constructor(public ceval: TypeCeval, public expression: string) { }\n\n  /**\n   * @desc 适用语法校验检查\n   * @memberof TokenStream\n   */\n  checkNextAccessGrammar = (): TypeToken => {\n    const {pos} = this;\n    const {current} = this\n\n    const next = this.next();\n\n    this.current = current;\n    this.pos = pos\n\n    return next\n  }\n\n  /**\n   * @desc 某些情况下做正则优化，比如 operator 至多3位，所以截取3位再匹配\n   * @param len 获取的长度\n   * @param offset 位移\n   * @see charAt与substr性能对比 https://jsperf.com/substr-or-charat\n   * @memberof TokenStream\n   */\n  getSomeCode = (len = 1, offset = 0): string => {\n    const start = offset + this.pos\n    const { length } = this.expression;\n    // debugger\n    return this.expression.substr(start, (start + len) > length ? length - start : len)\n  }\n\n  /**\n   * @desc 获取首个单词\n   * @memberof TokenStream\n   */\n  getFirstWord = (): string => {\n    const result = this.expression.substr(this.pos).match(/\\b\\w*\\b/)\n    return result ? result[0] : ''\n  }\n\n  /**\n   * 创建新的fieldType实例\n   * @memberof TokenStream\n   */\n  newToken = (type: string, value: any, pos?: number): TypeToken => {\n    return new Token(type, value, pos != null ? pos : this.pos);\n  }\n\n  /**\n   * 解析下一个 field\n   * @memberof TokenStream\n   */\n  next = (): TypeToken => {\n    if (!this.expression.length) {\n      return this.newToken(TOKEN_NAME, \"undefined\")\n    }\n    if (this.pos >= this.expression.length) {\n      return this.newToken(TOKEN_END, 'END');\n    }\n\n    if (this.isWhiteSpace() || this.isComment()) {\n      return this.next()\n    } else if (\n      this.isNumber() ||\n      this.isString() ||\n      this.isBoolean() ||\n      this.isParenthesis() ||\n      this.isComma() ||\n      this.isOperator() ||\n      this.isSemicolon() ||\n      this.isConst() ||\n      this.isVariable() ||\n      this.isFunctionDefined() ||\n      this.isName()\n    ) {\n      return this.current\n    } else {\n      this.parseError(`unknown character: ${this.expression.charAt(this.pos)}`, SyntaxError)\n    }\n  }\n\n  temporarySaved = () => {\n    this.savedPosition = this.pos;\n    this.savedCurrent = this.current;\n  }\n\n  restore = () => {\n    this.pos = this.savedPosition;\n    this.current = this.savedCurrent\n  }\n\n  /**\n   * 过滤空格 \\t \\r \\n\n   * @memberof TokenStream\n   */\n  isWhiteSpace = (): boolean => {\n    const matchWS = whitespaceReg.exec(this.getSomeCode())\n    while (matchWS && matchWS[1]) {\n      this.pos++\n      return true\n    }\n    return false\n  }\n\n  /**\n   * 过滤注释 /*  *\\/\n   * @memberof TokenStream\n   */\n  isComment = (): boolean => {\n    if (this.getSomeCode() === '/' && this.getSomeCode(1, 1) === '*') {\n      commentReg.lastIndex = 0;\n      const matchResult = commentReg.exec(this.getSomeCode(Infinity))\n      if (matchResult && matchResult[1]) {\n        this.pos += matchResult[1].length + 2 + 2; // /*matchResult[1]*/\n        return true\n      }\n    }\n    return false\n  }\n\n  /**\n   * 过滤空格 \\t \\r \\n\n   * @memberof TokenStream\n   */\n  isBoolean = (): boolean => {\n    const matchWS = booleanReg.exec(this.getSomeCode())\n    while (matchWS && matchWS[1]) {\n      this.pos++\n      return true\n    }\n    return false\n  }\n\n  /**\n   * 申明变量 TODO:support\n   * @memberof TokenStream\n   */\n  isVariable = (): boolean => {\n    const word = this.getFirstWord()\n    if (contains<string>(['const', 'var', 'let'], word)) {\n      this.pos += word.length;\n      this.current = this.newToken(TOKEN_VAR, word)\n      const nextToken = this.checkNextAccessGrammar()\n\n      if (nextToken.type !== TOKEN_NAME) {\n        throw new Error(`\"${word}\" ${nextToken.value} : This syntax Not as expected, should be \"${TOKEN_NAME}\", but is \"${nextToken}\"`)\n      }\n      return true\n    }\n    return false\n  }\n\n  /**\n   * 数字 \n   * @see 说明 需要考虑到 2进制0b10100 === 8进制024 === 10进制20 === 16进制0x14 === 10e0 === 20.000\n   * @memberof TokenStream\n   */\n  isNumber = (): boolean => {\n    const first = this.getSomeCode()\n    let number: string | undefined\n    let bit: number\n    const expr = this.getSomeCode(this.expression.length - this.pos)\n\n    if ((/\\d|\\./.test(first) === false) || (first === '.' && /\\.\\d/.test(this.getSomeCode(2)) === false)) return false\n\n    const [n] = expr.match(/^(0(x|b)+[0-9a-zA-Z]{1,})|(^0?\\d*(\\.\\d+)?)/); // 019 可能会被8进制拦截掉01， 所以必须要做^$\n\n    number10bitReg.lastIndex = 0;\n    if (first === '0' && n.length > 1 && !(/^0\\.\\d/.test(n))) { // 0.x 不是进制数\n      if (contains<string>(['b', 'x'], this.getSomeCode(1, 1)) && this.getSomeCode(1, n.length) === '.') {\n        // 0b0101.1 0xaf.1 ❌\n        // 099.1 属于十进制 ✅\n        this.parseError(`number '${n}' cannot is a floating point number, but actual is: '${n}${this.getSomeCode(3, n.length)}'`, SyntaxError)\n        return false\n      }\n\n      if (number2bitReg.test(n)) {\n        // 2进制\n        // @see 0b01 0b1110\n        number = execNumberReg(number2bitReg, n)\n        bit = number === undefined ? undefined : 2\n      } else if (number8bitReg.test(n)) {\n        // 8进制\n        // @see 012 || 077 ✅ \b\n        // @warn 080 || 079 ❌都是十进制  并非8进制\n        number = execNumberReg(number8bitReg, n)\n        bit = number === undefined ? undefined : 8\n      } else if (number16bitReg.test(n)) {\n        // 16进制 \n        // @see 0xadf\n        number = execNumberReg(number16bitReg, n)\n        bit = number === undefined ? undefined : 16\n      } else if (number010bitReg.test(n)) {\n        // 0开头十进制 \n        // @see 079 || 080  ✅\n        // @warn 03.1 || 00.1 || 00.  ❌ \n        number = execNumberReg(number010bitReg, n)\n        bit = number === undefined ? undefined : 10\n      } else {\n        this.parseError('number bitbase parser error', SyntaxError)\n        return false\n      }\n      if (number !== undefined && !this.ceval.getOptions().endableBitNumber) { // 给出准确的warning \n        throw new Error(`options \"endableBitNumber\": You have disabled bitbase number parsing, Not allowed ${number}`)\n      }\n    } else if (number10bitReg.test(expr)) { // 十进制\n      // 100 || 100.1 || 0.1 || .100 || .0  ✅ \n      // parseFloat是支持 0100.1 的。\n      number = execNumberReg(number10bitReg, expr)\n      bit = number === undefined ? undefined : 10\n    } else {\n      \n      return false\n    }\n\n    if (bit === 10) {\n      this.current = this.newToken(TOKEN_NUMBER, parseFloat(number))\n    } else {\n      this.current = this.newToken(TOKEN_NUMBER, parseInt(number.replace('0b', '').replace('0x', ''), bit))\n    }\n\n    this.pos += number.length\n    return true\n  }\n\n  /**\n   * 字符串\n   * @see '' \\'\\' \\\"\\\" \\\"\\'\\'\\\"\n   * @memberof TokenStream\n   */\n  isString = (): boolean => {\n    const first = this.getSomeCode()\n    const expr = this.getSomeCode(Infinity)\n    let matchString: RegExpExecArray | undefined\n    let strContent: string | undefined\n    if (first === '\\\"' || first === '\\'') {\n        // 一种情况是需要贪婪匹配 \\'\\'a\\'\\', 判断是否需要贪婪匹配\n      matchString = stringGreedyReg.exec(expr)\n      strContent = filterUndefine(matchString[1], matchString[2])\n      if (!isPalindrome(strContent)) {\n        // 不属于回文字符串则需要重新做惰性匹配\n        // 另一种则需要惰性 \"'a', 'b'\" => \"a\"\n        matchString = stringReg.exec(expr);\n        strContent = filterUndefine(matchString[1], matchString[2])\n      }\n\n      if (strContent !== undefined) {\n        this.current = this.newToken(TOKEN_STRING, strContent, this.pos)\n        this.pos += (strContent.length + first.length * 2); // \"\" 是没有长度的，会导致Token指针一直处于 \"\" \n        return true\n      }\n    }\n\n    return false\n  }\n\n  isFunctionDefined = (): boolean => {\n    const word = this.getFirstWord();\n    if(word === 'function') {\n      // TODO: 初期只支持 第一种, 同时支持 function fn() {} || const a = () => {} || const b = function(){}\n      this.current = this.newToken(TOKEN_FUNC, undefined);\n      this.pos+=word.length\n      const nextToken = this.checkNextAccessGrammar(); \n      if(nextToken.type !== TOKEN_NAME) {\n        this.parseError('function definition should have function name')\n        return false\n      }\n      return true;\n    }\n    return false\n  }\n  \n  /**\n   * 变量，可能是名称\n   * @see 遵循变量申明规范 可以以 $_ 开头，其他可以是 $_数字字母 ，排除保留字\n   * @memberof TokenStream\n   */\n  isName = (): boolean => {\n    const first = this.getSomeCode()\n    let result\n    if (first === '_' || first === '$' || /^[a-zA-Z]/.test(first)) {\n      variableReg.lastIndex = 0\n      result = variableReg.exec(this.getSomeCode(Infinity))\n    }\n\n    if (result === undefined || result === null || typeof result[1] !== \"string\") {\n      return false\n    }\n\n    if (jsWord[result[1]] === false) {\n      // 检测到保留字\n      this.parseError(`parser an reserved word: ${result[1]}`)\n      return false\n    }\n\n    if (jsAttr[result[1]] === false) {\n      // 检测到window属性 TODO: 应该命中 window.xxx\n      this.parseError(`parser an window native attributes or methods: ${result[1]}`)\n      return false\n    }\n\n    this.pos += result[1].length\n    this.current = this.newToken(TOKEN_NAME, result[1])\n    return true\n  }\n\n  /**\n   * 内置常量\n   * @see const 例如 true false PI undefined null\n   * @memberof TokenStream\n   */\n  isConst = (): boolean => {\n    const keys = Object.keys(this.ceval.consts)\n\n    const result = new RegExp(`^(${keys.join('|')})`).exec(this.getSomeCode(Infinity))\n\n    if (result && result[1]) {\n      this.current = this.newToken(TOKEN_NAME, result[1])\n      this.pos += result[1].length;\n      return true\n    }\n\n    return false\n  }\n\n  /**\n   * 分号\n   * @see ;\n   * @memberof TokenStream\n   */\n  isSemicolon = () => {\n    var first = this.getSomeCode();\n    if (first === ';') {\n      this.current = this.newToken(TOKEN_SEMICOLON, ';');\n      this.pos++;\n      return true;\n    }\n    return false;\n  };\n\n  /**\n   * 逗号,\n   * @see ,\n   * @memberof TokenStream\n   */\n  isComma = () => {\n    var first = this.getSomeCode();\n    if (first === ',') {\n      this.current = this.newToken(TOKEN_COMMA, ',');\n      this.pos++;\n      return true;\n    }\n    return false;\n  };\n\n  /**\n   * 圆、方括号\n   * @see ;\n   * @memberof TokenStream\n   */\n  isParenthesis = () => {\n    var first = this.getSomeCode();\n    if (contains(['(', ')'], first)) {\n      this.current = this.newToken(TOKEN_PAREN, first);\n    } else if (contains(['[', ']'], first)) {\n      this.current = this.newToken(TOKEN_SQUARE, first);\n    } else if (contains(['{', '}'], first)) {\n      this.current = this.newToken(TOKEN_CURLY, first);\n    } else {\n      return false\n    }\n    this.pos++;\n    return true;\n  };\n\n  /**\n   * 判断是否操作符 \n   * @see 操作符 + - * / || % ^ ? : . > < = >= <= | == === != !== in\n   * @memberof TokenStream\n   */\n  isOperator = (): boolean => {\n    const str = this.getSomeCode(Infinity);\n    let result: RegExpExecArray\n    if (operatorReg.test(str)) {\n      operatorReg.lastIndex = 0;\n      result = operatorReg.exec(str)\n    } else if (unaryMapReg.test(str)) {\n      unaryMapReg.lastIndex = 0\n      result = unaryMapReg.exec(str)\n    }\n\n    if (!result) return false\n\n    if(this.ceval.getOptions().endableOperators === false) {\n      throw new Error(`options \"endableOperators\": You disabled the operator, Therefore, \"${result[1]}\" it can not be used`)\n    }\n\n    this.pos += result[1].length\n    this.current = this.newToken(TOKEN_OPERATOR, result[1])\n    return true\n  }\n\n  /**\n   * 获取当前character定位\n   * @memberof TokenStream\n   */\n  getCoordinates = (): { line: number, column: number } => {\n    let line = 0;\n    let column = 0;\n    let index = -1;\n    \n    do {\n      line++;\n      column = this.pos - index;\n      index += 1\n      index += this.expression.substr(index).indexOf('\\n'); // 从每一行第一位开始寻找下一个换行符\n    } while (index >= 0 && index < this.pos && line < this.pos)\n    return {\n      line,\n      column\n    };\n  };\n\n  /**\n   * 解析出错\n   * @memberof TokenStream\n   */\n  parseError = (msg: string, ErrorType: ErrorConstructor | SyntaxErrorConstructor | TypeErrorConstructor = Error) => {\n    var coords = this.getCoordinates();\n    throw new ErrorType('parse error [' + coords.line + ':' + coords.column + '] => ' + msg);\n  };\n\n}","import Instruction, { INSTR_EXPRE, INSTR_FUNCDEF, INSTR_EXECUTBODY, INSTR_VARNAME, INSTR_NAME, INSTR_OBJECT, INSTR_ARRAY, INSTR_FUNCALL, INSTR_MEMBER, INSTR_NUMBER, INSTR_VAR, INSTR_OPERA2, INSTR_PLAIN, INSTR_OPERA3, INSTR_OPERA1 } from './instruction';\nimport Ceval from './index';\nimport { hasAttribute, mapToObject, merge, someCondition } from './utils/index';\n\n/**\n * 运算\n * @export calculation\n * @param {Instruction[]} tokens    TokenQueue\n * @param {object} [values={}]      数据池\n * @param {Ceval} ceval             instance of eval\n * @param {boolean} [statis=false]  true全量返回 默认false\n * @param {object} [scope={}]       作用域\n * @returns result or result[]\n */\nexport default function calculation(tokens: Instruction<any>[], values = Object.create(null), ceval: Ceval, statis = false, scope = Object.create(null)) {\n  if (window.name) {\n   console.group('calclation Dev')\n    console.log('tokens: ', tokens);\n    console.log('values', values)\n    console.log('scope', scope)\n   console.groupEnd()\n  }\n  const options = ceval.getOptions();\n  const { unaryOps, binaryOps, ternaryOps } = ceval\n  const stack = [];\n  const { length } = tokens;\n  let n1, n2, n3;\n  let fn: undefined | Function | Instruction<CustomFunc>\n  for (let i = 0; i < length; i++) {\n    const item = tokens[i];\n    const { type, value } = item || {};\n\n    if (!type) {\n      stack.push(item)\n      continue\n    }\n    switch(type) {\n      case INSTR_NUMBER: \n      case INSTR_PLAIN:\n      case INSTR_VARNAME: {\n        stack.push(value);\n        break\n      }\n      case INSTR_NAME: {\n        // 变量名称，范围作用域有 consts values _scope 后者优先\n        if (hasAttribute(scope, value)) {\n          // scope,作用域\n          stack.push(scope[value])\n        } else if (hasAttribute(values, value)) {\n          // customVal\n          stack.push(values[value])\n        } else if (hasAttribute(ceval.consts, value)) {\n          // 常量\n          stack.push(ceval.consts[value])\n        } else {\n          throw new Error(`${value} is not defined in values or consts`)\n        }\n        break\n      }\n      case INSTR_OPERA1: {\n        if(stack.length === 0) break;\n        // 一元运算，需要一个操作数\n        [n1] = stack.splice(-1, 1);\n        fn = specifyAttr<Function>(value, [values, unaryOps], options.allowOperatorsCovered)\n        stack.push(fn(n1));\n        break\n      }\n      case INSTR_OPERA2: { // 二元运算，需要有两个操作数\n        if(stack.length < 2) break;\n        [n1, n2] = stack.splice(-2, 2)\n        fn = specifyAttr<Function>(value, [values, binaryOps], options.allowOperatorsCovered)\n        // fn = binaryOps[value] as Function;\n        if (value === '&&') { // 1&&0&&3可能是连续的\n          stack.push(fn(n1, calculation([n2], values, ceval, statis, scope), false)); // true && true && false\n        } else if (value === '=') {\n          someCondition(hasAttribute(scope, n1), hasAttribute(values, n1), `${n1} is not define in values or current scope, if you are declaring a new variable, please add var, const or let Operator`)\n          // 如果当前作用域含有该属性，作用域优先\n          fn(n1, n2, hasAttribute(scope, n1) ? scope : values)\n        } else {\n          stack.push(fn(n1, calculation([n2], values, ceval, statis, scope), options));\n        }\n        break\n      }\n      case INSTR_OPERA3: { // 三元运算，需要有三个操作数\n        if(stack.length < 3) break;\n        [n1, n2, n3] = stack.splice(-3, 3)\n        fn = specifyAttr<Function>(value, [values, ternaryOps], options.allowOperatorsCovered)\n        stack.push(fn(n1, n2, n3));\n        break\n      }\n      case INSTR_EXPRE: { // 表达式\n        stack.push(calculation(item.value, values, ceval, statis, scope))\n        break;\n      }\n      case INSTR_MEMBER: { // 成员访问\n        if (stack.length < 1) break;\n        if (!value) { // a[\"b\"]\n          [n1, n2] = stack.splice(-2, 2);\n          stack.push(n1[n2]);\n          break\n        }\n        n1 = stack.pop(); // a.b\n        stack.push(n1[value])\n        break\n      }\n      case INSTR_ARRAY: { // 数组字面量\n        stack.push(calculation(value, values, ceval, true, scope))\n        break\n      }\n      case INSTR_OBJECT: { // 对象字面量\n        const instr = Object.create(null)\n        Object.keys(value).forEach(key => {\n          instr[key] = calculation(value[key], values, ceval, statis,scope)\n        })\n        stack.push(instr)\n        break\n      }\n      case INSTR_VAR: { // 赋值语句\n        [n1, n2] = stack.splice(-2, 2)\n        switch (value) {\n          case 'let':\n          case 'const': {\n            // let const的行为待定义, let 和 const 应该挂载到作用域上，而var 可以赋给 values \n            // TODO: 需要判定assgin给scope还是values\n            if (hasAttribute(scope, n1)) {\n              console.warn(`${n1} already statement in consts or scope`)\n            }\n            scope[n1] = n2;\n            break\n          }\n          case 'var': {\n            values[n1] = n2; \n            break\n          }\n          default: {\n            console.warn('Unexpected statement identifier')\n            break;\n          }\n        }\n        break\n      }\n      case INSTR_FUNCALL: { // 自声明函数调用，区分是外部函数还是内声明函数\n        const args = stack.splice(-value, value);\n        fn = stack.pop();\n        // if(args.length !== value) {} // TODO: 参数不够的情况 warning\n        if (typeof fn === 'function') {\n          // 外置函数，即在consts内声明的\n          stack.push(fn.apply(null, args))\n          continue\n        } else if(fn.value instanceof CustomFunc) { // 内置函数\n          fn.value.updateScope(args)\n          stack.push(fn.value.invokeBody())\n        }\n        break\n      }\n      case INSTR_FUNCDEF: { // 函数定义\n        if (typeof value !== 'string') {\n          stack.push(value); // 函数体\n          continue\n        }\n        if (stack.length === 0) return\n        const _scope = merge(Object.create(null), scope); // 作用域\n  \n        // done: 嵌套函数区分, 挂载到当前_scope上\n        _scope[value] = new Instruction<CustomFunc>(INSTR_EXECUTBODY, new CustomFunc(stack.pop(), values, _scope, ceval))\n  \n        Object.assign(scope, _scope)\n        break\n      }\n      default: {\n        const _val = Symbol('_init') // 值可能就是undefined，做区分\n        let val = _val\n        try {\n          val = item.value\n        } catch (e) {\n          // item = undefined | null | false | true ....\n        }\n        if (val !== _val) {\n          stack.push(val)\n        }\n      }\n    }\n  }\n  return statis ? stack : stack[0];\n}\n\nfunction specifyAttr<T>(value: string, [customValues, defaultValues], shouldCustom = false): T {\n  let fn: T\n  if(shouldCustom && hasAttribute(customValues, value)) {\n    fn = customValues[value] as T;\n  } else {\n    fn = defaultValues[value] as T;\n  }\n  return fn\n};\n\nclass CustomFunc {\n  args: string[];\n\n  constructor(public func: Instruction<any>[], public values: Record<string, any>, public _scope: Record<string, any>, public ceval: Ceval) {\n    const args = this.func.splice(0, func.length - 1)\n    this.args = calculation(args, mapToObject(args, (k) => k), ceval, true)\n    this._scope = merge(mapToObject(args), _scope);\n  }\n\n  updateScope = (scope: any[]) => {\n    // 假设 Object attribute 是不保证顺序的。\n    this.args.forEach((key, index) => {\n      if(hasAttribute(this._scope, key)) {\n        this._scope[key] = scope[index]\n      }\n    });\n  }\n\n  invokeBody = () => {\n    return calculation(this.func, this.values, this.ceval, false, this._scope)\n  }\n}\n","import { getTime } from './index';\n\nconst [date, time] = getTime()\n\nexport default {\n  now: Date.now(),\n  date,\n  time,\n}","import Parser from './parser';\nimport Ceval from './index';\nimport Token from './token';\nimport TokenStream from './token-stream';\nimport Instruction from './instruction';\n\nexport type TypeParser = InstanceType<typeof Parser>\n\nexport type TypeCeval = InstanceType<typeof Ceval>\n\nexport type TypeToken = InstanceType<typeof Token>\n\nexport type TypeTokenStream = InstanceType<typeof TokenStream>\n\nexport type TypeInstruction = Instruction<any>\n\nexport type KeyOfValType<T extends object> = T[keyof T];\n\nexport class CevalOptions {\n  /**\n   * @desc 允许使用运算符\n   * @requires false\n   * @todo TODO: 做控制\n   * @type {boolean}\n   */\n  endableOperators?: boolean = true;\n\n  /**\n   * @desc 允许启用多位进制Number\n   * @requires false\n   * @todo TODO: 做控制\n   * @type {boolean}\n   */\n  endableBitNumber?: boolean = true;\n\n  /**\n   * @desc 允许访问成员\n   * @requires false\n   * @todo TODO: 做控制\n   * @type {boolean}\n   */\n  allowMemberAccess?: boolean = true;\n\n  /**\n   * @desc 允许默认放大计算，以处理四则运算的结果 e.g 0.1+0.2 !== 0.3  || 1.0-0.9 !== 0.1\n   * 在超出边界的情况下（ta > Number.MAX_SAFE_INTEGER || ta < Number.MIN_SAFE_INTEGER）会不做处理，还原四则运算\n   * @requires false \n   * @type {boolean}\n   */\n  allowHandleNumberPrecision?: boolean = true;\n\n  /**\n   * @desc 默认不允许操作符被 presetValue 覆盖\n   * @see 某些情况下开发者想制定更加精确的计算,例如BigInt,那么就在根据operatorMap声明presetValue={'+':Function}\n   * @requires false\n   * @type {boolean}\n   * @memberof CevalOptions\n   */\n  allowOperatorsCovered?: boolean = false;\n  \n  /**\n   * @desc 当没有返回值或为undefined时触发默认返回值\n   * @requires false\n   * @todo done\n   * @type {any}\n   */\n  defaultReturnValues?: any = '' // done\n}","import cloneDeep from 'lodash/cloneDeep'\nimport Parser from './parser';\nimport systemMap, { TypeUnary, TypeBinary, TypeTernary, TypeConst, TypeFunction, operatorMap } from './systemMap';\nimport TokenStream from './token-stream';\nimport calculation from './calculation';\nimport presetVariable from './utils/presetVariable';\nimport { merge } from './utils/index';\nimport { CevalOptions, TypeInstruction } from './interface';\n\nexport default class Ceval {\n  unaryOps: TypeUnary;\n\n  binaryOps: TypeBinary;\n\n  ternaryOps: TypeTernary;\n\n  consts: TypeConst;\n\n  functions: TypeFunction;\n\n  /**\n   * 操作符映射表，可做在presetValues覆盖运算\n   */\n  operatorMap = operatorMap;\n\n  private currentValues: Record<string, any> = cloneDeep(presetVariable);\n\n  constructor(private options: Readonly<CevalOptions> = {}) {\n    Object.assign(this, systemMap);\n    merge(this.options, new CevalOptions())\n  }\n\n  /**\n   * 查询支持的操作符方法名称, 可做覆盖\n   * @param ops 操作符\n   * @memberof Ceval\n   */\n  getSupportOperationMap = (ops: string): null | Function => {\n    return Object.prototype.hasOwnProperty.call(operatorMap, ops) ? operatorMap[ops] : null\n  }\n\n  /**\n   * 解析字符串，对外暴露方法\n   * @memberof Ceval\n   */\n  parseString = (expression: string, values: Record<string, any> = {}) => {\n    const instr: TypeInstruction[] = [];\n    \n    Parser.generatorParser(this, new TokenStream(this, expression), instr)\n\n    return this.injectValueToCalc(instr, values)\n  }\n\n  /**\n   * 获取当前数据池 预置+外置+内声明\n   * @returns 数据池\n   * @memberof Ceval\n   */\n  getCurrentValues = (): Record<string, any> => cloneDeep(this.currentValues);\n\n  /**\n   * 传入指令集开始计算\n   * @param {tokens} Instruction[] 指令集\n   * @param {Record<string, any>} [values={}] 数据池\n   * @memberof Ceval\n   */\n  private injectValueToCalc = (tokens: TypeInstruction[], values: Record<string, any> = {}): any => {\n    // @TODO 检查敏感字\n    // @TODO 检查关键字\n    this.updatePresetValues(values);\n    const result = calculation(tokens, this.currentValues, this)\n    return result === undefined ? this.options.defaultReturnValues : result\n  }\n\n  /**\n   * Update PresetValues\n   * @param {values} Record<string, any> 配置\n   * @memberof Ceval\n   */\n  updatePresetValues = (values: Record<string, any>): void => {\n    Object.assign(this.currentValues, values)\n  }\n\n  /**\n   * Update Option\n   * @param {Options} CevalOptions 配置\n   * @memberof Ceval\n   */\n  updateOptions = (Options: Partial<CevalOptions>): void => {\n    Object.assign(this.options, Options)\n  }\n\n  /**\n   * get Options\n   * @memberof Ceval\n   */\n  getOptions = () => {\n    return cloneDeep(this.options);\n  }\n\n} "],"names":["Instruction","[object Object]","type","value","this","TOKEN_END","TOKEN_COMMA","TOKEN_SEMICOLON","Token","index","window","_debug","console","log","toString","Object","prototype","isObject","obj","call","contains","arr","some","v","merge","target","source","keys","forEach","key","val","hasOwnProperty","Array","isArray","filterUndefine","args","one","item","undefined","hasAttribute","name","mapToObject","defaultValue","length","Set","Error","join","create","someCondition","errMsg","pop","find","d","getDigitLength","num","split","checkBounds","number","Number","MAX_SAFE_INTEGER","MIN_SAFE_INTEGER","getBaseNum","a","b","baseNum","Math","pow","max","unwantedHandlePercision","isInteger","system","functions","random","min","apply","f","map","x","i","consts","E","PI","true","false","null","binaryOps","+","options","allowHandleNumberPrecision","round","-","*","/","%","^","||","n1","n2","&&","==","!=","!==",">","<",">=","<=","=","variables","[","array","===","in","String","eliminateQuote","str","quoteReg","test","result","exec","ternaryOps","?","cond","yep","nope","unaryOps","!","~","++","--","typeof","return","sin","cos","tan","syntaxOperator",":",".","excludeOperator","operatorMap","mapVal","data","object","cb","maps","includes","BLACK_LIST_OPERATORS","supportOperator","from","concat","filter","op","sort","whitespaceReg","booleanReg","commentReg","stringReg","stringGreedyReg","number2bitReg","number8bitReg","number010bitReg","number10bitReg","number16bitReg","variableReg","operatorReg","RegExp","r","unaryMapReg","unarySymbolMapReg","execNumberReg","reg","expr","lastIndex","isUnaryOpeator","Parser","ceval","tokens","exprInstr","parseExpression","pos","expression","current","nextToken","next","indexOf","matchToken","accept","line","column","getCoordinates","printLog","error","savedCurrent","savedNextToken","temporarySaved","restore","instr","parseMultipleEvaluation","exp","push","parseAssignmentExpression","parseConditionalExpression","ident","parseOrExpression","trueBranch","falseBranch","expect","parseAndExpression","branch","parseBitwiseOrExpression","parseBitwiseAndExpression","parseEqualExpression","parseCompareExpression","parseInOrAtExpression","parseBitwiseMoveExpression","parseAddOrSubExpression","parseMulOrDivExpression","parseUnaryExpression","parsePersetFuncCallExpression","parseField","parseOuterFunctionCallExpression","parseMemberAccessExpression","parseArguments","count","getOptions","allowMemberAccess","parseArrayLiteralDeclaration","parseObjectLiteralDeclaration","identifier","parseFunctionDefinedDeclaration","expreInstr","funcName","parseFunctionBodyExpression","SyntaxError","msg","tip","c","inspectParseEnd","parser","jsWord","abstract","arguments","boolean","break","byte","case","catch","char","class","const","continue","debugger","default","delete","do","double","else","enum","eval","export","extends","final","finally","float","for","function","goto","if","implements","import","instanceof","int","interface","let","long","native","new","package","private","protected","public","short","static","super","switch","synchronized","throw","throws","transient","try","var","void","volatile","while","with","yield","jsAttr","Date","Infinity","isFinite","isNaN","isPrototypeOf","NaN","valueOf","TokenStream","len","offset","start","substr","match","newToken","isWhiteSpace","isComment","isNumber","isString","isBoolean","isParenthesis","isComma","isOperator","isSemicolon","isConst","isVariable","isFunctionDefined","isName","parseError","charAt","savedPosition","matchWS","getSomeCode","matchResult","word","getFirstWord","checkNextAccessGrammar","first","bit","n","endableBitNumber","parseFloat","parseInt","replace","matchString","strContent","surplusStr","substring","isPalindrome","endableOperators","ErrorType","coords","calculation","values","statis","scope","group","groupEnd","stack","n3","fn","splice","specifyAttr","allowOperatorsCovered","warn","CustomFunc","updateScope","invokeBody","_scope","assign","_val","Symbol","e","customValues","defaultValues","shouldCustom","func","k","date","time","o","now","getFullYear","getMonth","getDate","getHours","getMinutes","getSeconds","t","getTime","CevalOptions","cloneDeep","presetVariable","ops","generatorParser","injectValueToCalc","currentValues","updatePresetValues","defaultReturnValues","Options","systemMap"],"mappings":"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"}